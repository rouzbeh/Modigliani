.TH "TNT::UpperTriangularView" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TNT::UpperTriangularView \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <triang.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MaTRiX::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef MaTRiX::element_type \fBelement_type\fP"
.br
.ti -1c
.RI "typedef MaTRiX::element_type \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBelement_type\fP \fBT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSubscript\fP \fBdim\fP (\fBSubscript\fP d) const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBlbound\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_rows\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_cols\fP () const "
.br
.ti -1c
.RI "\fBUpperTriangularView\fP (MaTRiX &A)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBget\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator()\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "MaTRiX & \fBA_\fP"
.br
.ti -1c
.RI "MaTRiX::element_type \fBzero_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class MaTRiX> class TNT::UpperTriangularView< MaTRiX >"

.PP
Definition at line 336 of file triang.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class MaTRiX> typedef MaTRiX::const_reference \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBconst_reference\fP"
.PP
Definition at line 347 of file triang.h.
.SS "template<class MaTRiX> typedef MaTRiX::element_type \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBelement_type\fP"
.PP
Definition at line 348 of file triang.h.
.SS "template<class MaTRiX> typedef \fBelement_type\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBT\fP"
.PP
Definition at line 350 of file triang.h.
.SS "template<class MaTRiX> typedef MaTRiX::element_type \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBvalue_type\fP"
.PP
Definition at line 349 of file triang.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class MaTRiX> \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBUpperTriangularView\fP (MaTRiX & A)\fC [inline]\fP"
.PP
Definition at line 360 of file triang.h.
.PP
.nf
: A_(A),  zero_(0) {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::dim (\fBSubscript\fP d) const\fC [inline]\fP"
.PP
Definition at line 352 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_.
.PP
.nf
{  return A_.dim(d); }
.fi
.SS "template<class MaTRiX> \fBconst_reference\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::get (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 363 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_, TNT::UpperTriangularView< MaTRiX >::lbound(), and TNT::UpperTriangularView< MaTRiX >::zero_.
.PP
.nf
    { 
#ifdef TNT_BOUNDS_CHECK
        assert(lbound()<=i);
        assert(i<=A_.num_rows() + lbound() - 1);
        assert(lbound()<=j);
        assert(j<=A_.num_cols() + lbound() - 1);
#endif
        if (i>j) 
            return zero_;
        else
            return A_(i,j);
    }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::lbound () const\fC [inline]\fP"
.PP
Definition at line 353 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_.
.PP
Referenced by TNT::UpperTriangularView< MaTRiX >::get(), TNT::matmult(), and TNT::UpperTriangularView< MaTRiX >::operator()().
.PP
.nf
{ return A_.lbound(); }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::num_cols () const\fC [inline]\fP"
.PP
Definition at line 355 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_.
.PP
Referenced by TNT::matmult(), and TNT::operator<<().
.PP
.nf
{ return A_.num_cols(); }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::num_rows () const\fC [inline]\fP"
.PP
Definition at line 354 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_.
.PP
Referenced by TNT::matmult(), and TNT::operator<<().
.PP
.nf
{ return A_.num_rows(); }
.fi
.SS "template<class MaTRiX> \fBconst_reference\fP \fBTNT::UpperTriangularView\fP< MaTRiX >::operator() (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 378 of file triang.h.
.PP
References TNT::UpperTriangularView< MaTRiX >::A_, TNT::UpperTriangularView< MaTRiX >::lbound(), and TNT::UpperTriangularView< MaTRiX >::zero_.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
        assert(lbound()<=i);
        assert(i<=A_.num_rows() + lbound() - 1);
        assert(lbound()<=j);
        assert(j<=A_.num_cols() + lbound() - 1);
#endif
        if (i>j) 
            return zero_;
        else
            return A_(i,j);
    }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<class MaTRiX> MaTRiX& \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBA_\fP\fC [protected]\fP"
.PP
Definition at line 341 of file triang.h.
.PP
Referenced by TNT::UpperTriangularView< MaTRiX >::dim(), TNT::UpperTriangularView< MaTRiX >::get(), TNT::UpperTriangularView< MaTRiX >::lbound(), TNT::UpperTriangularView< MaTRiX >::num_cols(), TNT::UpperTriangularView< MaTRiX >::num_rows(), and TNT::UpperTriangularView< MaTRiX >::operator()().
.SS "template<class MaTRiX> MaTRiX::element_type \fBTNT::UpperTriangularView\fP< MaTRiX >::\fBzero_\fP\fC [protected]\fP"
.PP
Definition at line 342 of file triang.h.
.PP
Referenced by TNT::UpperTriangularView< MaTRiX >::get(), and TNT::UpperTriangularView< MaTRiX >::operator()().

.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
