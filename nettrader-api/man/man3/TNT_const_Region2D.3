.TH "TNT::const_Region2D" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TNT::const_Region2D \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <region2d.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Array2D::value_type \fBT\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBT\fP \fBelement_type\fP"
.br
.ti -1c
.RI "typedef const \fBT\fP * \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef const \fBT\fP & \fBconst_reference\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const Array2D & \fBarray\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBlbound\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_rows\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_cols\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBoffset\fP (\fBSubscript\fP i) const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBdim\fP (\fBSubscript\fP i) const "
.br
.ti -1c
.RI "\fBconst_Region2D\fP (const Array2D &A, \fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)"
.br
.ti -1c
.RI "\fBconst_Region2D\fP (const Array2D &A, const \fBIndex1D\fP &I, const \fBIndex1D\fP &J)"
.br
.ti -1c
.RI "\fBconst_Region2D\fP (\fBconst_Region2D\fP< Array2D > &A, \fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)"
.br
.ti -1c
.RI "\fBconst_Region2D\fP< Array2D > \fBoperator()\fP (\fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)"
.br
.ti -1c
.RI "\fBconst_Region2D\fP< Array2D > \fBoperator()\fP (const \fBIndex1D\fP &I, const \fBIndex1D\fP &J)"
.br
.ti -1c
.RI "const \fBT\fP & \fBoperator()\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const Array2D & \fBA_\fP"
.br
.ti -1c
.RI "\fBSubscript\fP \fBoffset_\fP [2]"
.br
.ti -1c
.RI "\fBSubscript\fP \fBdim_\fP [2]"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class Array2D> class TNT::const_Region2D< Array2D >"

.PP
Definition at line 275 of file region2d.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class Array2D> typedef const \fBT\fP* \fBTNT::const_Region2D\fP< Array2D >::\fBconst_iterator\fP"
.PP
Definition at line 287 of file region2d.h.
.SS "template<class Array2D> typedef const \fBT\fP& \fBTNT::const_Region2D\fP< Array2D >::\fBconst_reference\fP"
.PP
Definition at line 288 of file region2d.h.
.SS "template<class Array2D> typedef \fBT\fP \fBTNT::const_Region2D\fP< Array2D >::\fBelement_type\fP"
.PP
Definition at line 286 of file region2d.h.
.SS "template<class Array2D> typedef Array2D::value_type \fBTNT::const_Region2D\fP< Array2D >::\fBT\fP"
.PP
Definition at line 284 of file region2d.h.
.SS "template<class Array2D> typedef \fBT\fP \fBTNT::const_Region2D\fP< Array2D >::\fBvalue_type\fP"
.PP
Definition at line 285 of file region2d.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class Array2D> \fBTNT::const_Region2D\fP< Array2D >::\fBconst_Region2D\fP (const Array2D & A, \fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)\fC [inline]\fP"
.PP
Definition at line 313 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_, TNT::const_Region2D< Array2D >::offset_, and TNT_BASE_OFFSET.
.PP
.nf
                                            : A_(A)
        {
#ifdef TNT_BOUNDS_CHECK
            assert( i1 <= i2 );
            assert( j1 <= j2);
            assert( TNT_BASE_OFFSET <= i1);
            assert( i2<= A.dim(TNT_BASE_OFFSET) + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= j1);
            assert( j2<= A.dim(TNT_BASE_OFFSET+1) + TNT_BASE_OFFSET-1 );
#endif

            offset_[0] = i1-TNT_BASE_OFFSET;
            offset_[1] = j1-TNT_BASE_OFFSET;
            dim_[0] = i2-i1+1;
            dim_[1] = j2-j1+1;
        }
.fi
.SS "template<class Array2D> \fBTNT::const_Region2D\fP< Array2D >::\fBconst_Region2D\fP (const Array2D & A, const \fBIndex1D\fP & I, const \fBIndex1D\fP & J)\fC [inline]\fP"
.PP
Definition at line 331 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_, TNT::Index1D::lbound(), TNT::const_Region2D< Array2D >::offset_, TNT_BASE_OFFSET, and TNT::Index1D::ubound().
.PP
.nf
                : A_(A)
        {
#ifdef TNT_BOUNDS_CHECK
            assert( I.lbound() <= I.ubound() );
            assert( J.lbound() <= J.ubound() );
            assert( TNT_BASE_OFFSET <= I.lbound());
            assert( I.ubound()<= A.dim(TNT_BASE_OFFSET) + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= J.lbound());
            assert( J.ubound() <= A.dim(TNT_BASE_OFFSET+1) + TNT_BASE_OFFSET-1 );
#endif

            offset_[0] = I.lbound()-TNT_BASE_OFFSET;
            offset_[1] = J.lbound()-TNT_BASE_OFFSET;
            dim_[0] = I.ubound() - I.lbound() + 1;
            dim_[1] = J.ubound() - J.lbound() + 1;
        }
.fi
.SS "template<class Array2D> \fBTNT::const_Region2D\fP< Array2D >::\fBconst_Region2D\fP (\fBconst_Region2D\fP< Array2D > & A, \fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)\fC [inline]\fP"
.PP
Definition at line 350 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim(), TNT::const_Region2D< Array2D >::dim_, TNT::const_Region2D< Array2D >::offset_, and TNT_BASE_OFFSET.
.PP
.nf
                                        : A_(A.A_)
        {
#ifdef TNT_BOUNDS_CHECK
            assert( i1 <= i2 );
            assert( j1 <= j2);
            assert( TNT_BASE_OFFSET <= i1);
            assert( i2<= A.dim(TNT_BASE_OFFSET) + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= j1);
            assert( j2<= A.dim(TNT_BASE_OFFSET+1) + TNT_BASE_OFFSET-1 );
#endif
            offset_[0] = (i1 - TNT_BASE_OFFSET) + A.offset_[0];
            offset_[1] = (j1 - TNT_BASE_OFFSET) + A.offset_[1];
            dim_[0] = i2-i1 + 1;
            dim_[1] = j2-j1+1;
        }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class Array2D> const Array2D& \fBTNT::const_Region2D\fP< Array2D >::array () const\fC [inline]\fP"
.PP
Definition at line 290 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::A_.
.PP
.nf
{ return A_; }
.fi
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::dim (\fBSubscript\fP i) const\fC [inline]\fP"
.PP
Definition at line 303 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_, and TNT_BASE_OFFSET.
.PP
Referenced by TNT::const_Region2D< Array2D >::const_Region2D().
.PP
.nf
        {
#ifdef TNT_BOUNDS_CHECK
            assert( TNT_BASE_OFFSET <= i);
            assert( i<= dim_[0] + TNT_BASE_OFFSET-1);
#endif
            return dim_[i-TNT_BASE_OFFSET];
        }
.fi
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::lbound () const\fC [inline]\fP"
.PP
Definition at line 291 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::A_.
.PP
Referenced by TNT::Region2D< Array2D >::operator=().
.PP
.nf
{ return A_.lbound(); }
.fi
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::num_cols () const\fC [inline]\fP"
.PP
Definition at line 293 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_.
.PP
Referenced by TNT::Region2D< Array2D >::operator=().
.PP
.nf
{ return dim_[1]; }
.fi
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::num_rows () const\fC [inline]\fP"
.PP
Definition at line 292 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_.
.PP
Referenced by TNT::Region2D< Array2D >::operator=().
.PP
.nf
{ return dim_[0]; }
.fi
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::offset (\fBSubscript\fP i) const\fC [inline]\fP"
.PP
Definition at line 294 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::dim_, TNT::const_Region2D< Array2D >::offset_, and TNT_BASE_OFFSET.
.PP
.nf
        {
#ifdef TNT_BOUNDS_CHECK
            assert( TNT_BASE_OFFSET <= i);
            assert( i<= dim_[0] + TNT_BASE_OFFSET-1);
#endif
            return offset_[i-TNT_BASE_OFFSET];
        }
.fi
.SS "template<class Array2D> \fBconst_Region2D\fP<Array2D> \fBTNT::const_Region2D\fP< Array2D >::operator() (const \fBIndex1D\fP & I, const \fBIndex1D\fP & J)\fC [inline]\fP"
.PP
Definition at line 385 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::A_, TNT::const_Region2D< Array2D >::dim_, TNT::Index1D::lbound(), TNT::const_Region2D< Array2D >::offset_, TNT_BASE_OFFSET, and TNT::Index1D::ubound().
.PP
.nf
        {
#ifdef TNT_BOUNDS_CHECK
            assert( I.lbound() <= I.ubound() );
            assert( J.lbound() <= J.ubound() );
            assert( TNT_BASE_OFFSET <= I.lbound());
            assert( I.ubound()<= dim_[0] + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= J.lbound());
            assert( J.ubound() <= dim_[1] + TNT_BASE_OFFSET-1 );
#endif

            return const_Region2D<Array2D>(A_, I.lbound()+offset_[0],
                offset_[0] + I.ubound(), offset_[1]+J.lbound(),
                offset_[1] + J.ubound());
        }
.fi
.SS "template<class Array2D> const \fBT\fP& \fBTNT::const_Region2D\fP< Array2D >::operator() (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 403 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::A_, TNT::const_Region2D< Array2D >::dim_, TNT::const_Region2D< Array2D >::offset_, and TNT_BASE_OFFSET.
.PP
.nf
        {
#ifdef TNT_BOUNDS_CHECK
            assert( TNT_BASE_OFFSET <= i);
            assert( i<= dim_[0] + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= j);
            assert( j<= dim_[1] + TNT_BASE_OFFSET-1 );
#endif
            return A_(i+offset_[0], j+offset_[1]);
        }
.fi
.SS "template<class Array2D> \fBconst_Region2D\fP<Array2D> \fBTNT::const_Region2D\fP< Array2D >::operator() (\fBSubscript\fP i1, \fBSubscript\fP i2, \fBSubscript\fP j1, \fBSubscript\fP j2)\fC [inline]\fP"
.PP
Definition at line 368 of file region2d.h.
.PP
References TNT::const_Region2D< Array2D >::A_, TNT::const_Region2D< Array2D >::dim_, TNT::const_Region2D< Array2D >::offset_, and TNT_BASE_OFFSET.
.PP
.nf
        {
#ifdef TNT_BOUNDS_CHECK
            assert( i1 <= i2 );
            assert( j1 <= j2);
            assert( TNT_BASE_OFFSET <= i1);
            assert( i2<= dim_[0] + TNT_BASE_OFFSET-1);
            assert( TNT_BASE_OFFSET <= j1);
            assert( j2<= dim_[0] + TNT_BASE_OFFSET-1 );
#endif
            return const_Region2D<Array2D>(A_, 
                    i1+offset_[0], offset_[0] + i2, 
                    j1+offset_[1], offset_[1] + j2);
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<class Array2D> const Array2D& \fBTNT::const_Region2D\fP< Array2D >::\fBA_\fP\fC [protected]\fP"
.PP
Definition at line 279 of file region2d.h.
.PP
Referenced by TNT::const_Region2D< Array2D >::array(), TNT::const_Region2D< Array2D >::lbound(), and TNT::const_Region2D< Array2D >::operator()().
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::\fBdim_\fP[2]\fC [protected]\fP"
.PP
Definition at line 281 of file region2d.h.
.PP
Referenced by TNT::const_Region2D< Array2D >::const_Region2D(), TNT::const_Region2D< Array2D >::dim(), TNT::const_Region2D< Array2D >::num_cols(), TNT::const_Region2D< Array2D >::num_rows(), TNT::const_Region2D< Array2D >::offset(), and TNT::const_Region2D< Array2D >::operator()().
.SS "template<class Array2D> \fBSubscript\fP \fBTNT::const_Region2D\fP< Array2D >::\fBoffset_\fP[2]\fC [protected]\fP"
.PP
Definition at line 280 of file region2d.h.
.PP
Referenced by TNT::const_Region2D< Array2D >::const_Region2D(), TNT::const_Region2D< Array2D >::offset(), and TNT::const_Region2D< Array2D >::operator()().

.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
