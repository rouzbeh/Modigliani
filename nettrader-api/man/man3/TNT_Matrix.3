.TH "TNT::Matrix" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TNT::Matrix \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <cmat.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBSubscript\fP \fBsize_type\fP"
.br
.ti -1c
.RI "typedef T \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef T \fBelement_type\fP"
.br
.ti -1c
.RI "typedef T * \fBpointer\fP"
.br
.ti -1c
.RI "typedef T * \fBiterator\fP"
.br
.ti -1c
.RI "typedef T & \fBreference\fP"
.br
.ti -1c
.RI "typedef const T * \fBconst_iterator\fP"
.br
.ti -1c
.RI "typedef const T & \fBconst_reference\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSubscript\fP \fBlbound\fP () const "
.br
.ti -1c
.RI "\fBoperator T **\fP ()"
.br
.ti -1c
.RI "\fBoperator T **\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBsize\fP () const "
.br
.ti -1c
.RI "\fBMatrix\fP ()"
.br
.ti -1c
.RI "\fBMatrix\fP (const \fBMatrix\fP< T > &A)"
.br
.ti -1c
.RI "\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const T &value=T())"
.br
.ti -1c
.RI "\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const T *v)"
.br
.ti -1c
.RI "\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const char *s)"
.br
.ti -1c
.RI "\fB~Matrix\fP ()"
.br
.ti -1c
.RI "\fBMatrix\fP< T > & \fBnewsize\fP (\fBSubscript\fP M, \fBSubscript\fP N)"
.br
.ti -1c
.RI "\fBMatrix\fP< T > & \fBoperator=\fP (const \fBMatrix\fP< T > &A)"
.br
.ti -1c
.RI "\fBMatrix\fP< T > & \fBoperator=\fP (const T &scalar)"
.br
.ti -1c
.RI "\fBSubscript\fP \fBdim\fP (\fBSubscript\fP d) const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_rows\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_cols\fP () const "
.br
.ti -1c
.RI "T * \fBoperator[]\fP (\fBSubscript\fP i)"
.br
.ti -1c
.RI "const T * \fBoperator[]\fP (\fBSubscript\fP i) const "
.br
.ti -1c
.RI "\fBreference\fP \fBoperator()\fP (\fBSubscript\fP i)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator()\fP (\fBSubscript\fP i) const "
.br
.ti -1c
.RI "\fBreference\fP \fBoperator()\fP (\fBSubscript\fP i, \fBSubscript\fP j)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator()\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitialize\fP (\fBSubscript\fP M, \fBSubscript\fP N)"
.br
.ti -1c
.RI "void \fBcopy\fP (const T *v)"
.br
.ti -1c
.RI "void \fBset\fP (const T &val)"
.br
.ti -1c
.RI "void \fBdestroy\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBSubscript\fP \fBm_\fP"
.br
.ti -1c
.RI "\fBSubscript\fP \fBn_\fP"
.br
.ti -1c
.RI "\fBSubscript\fP \fBmn_\fP"
.br
.ti -1c
.RI "T * \fBv_\fP"
.br
.ti -1c
.RI "T ** \fBrow_\fP"
.br
.ti -1c
.RI "T * \fBvm1_\fP"
.br
.ti -1c
.RI "T ** \fBrowm1_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T> class TNT::Matrix< T >"

.PP
Definition at line 46 of file cmat.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class T> typedef const T* \fBTNT::Matrix\fP< T >::\fBconst_iterator\fP"
.PP
Definition at line 56 of file cmat.h.
.SS "template<class T> typedef const T& \fBTNT::Matrix\fP< T >::\fBconst_reference\fP"
.PP
Definition at line 57 of file cmat.h.
.SS "template<class T> typedef T \fBTNT::Matrix\fP< T >::\fBelement_type\fP"
.PP
Definition at line 52 of file cmat.h.
.SS "template<class T> typedef T* \fBTNT::Matrix\fP< T >::\fBiterator\fP"
.PP
Definition at line 54 of file cmat.h.
.SS "template<class T> typedef T* \fBTNT::Matrix\fP< T >::\fBpointer\fP"
.PP
Definition at line 53 of file cmat.h.
.SS "template<class T> typedef T& \fBTNT::Matrix\fP< T >::\fBreference\fP"
.PP
Definition at line 55 of file cmat.h.
.SS "template<class T> typedef \fBSubscript\fP \fBTNT::Matrix\fP< T >::\fBsize_type\fP"
.PP
Definition at line 50 of file cmat.h.
.SS "template<class T> typedef T \fBTNT::Matrix\fP< T >::\fBvalue_type\fP"
.PP
Definition at line 51 of file cmat.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T> \fBTNT::Matrix\fP< T >::\fBMatrix\fP ()\fC [inline]\fP"
.PP
Definition at line 172 of file cmat.h.
.PP
.nf
: m_(0), n_(0), mn_(0), v_(0), row_(0), vm1_(0), rowm1_(0) {};
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::\fBMatrix\fP (const \fBMatrix\fP< T > & A)\fC [inline]\fP"
.PP
Definition at line 174 of file cmat.h.
.PP
.nf
    {
        initialize(A.m_, A.n_);
        copy(A.v_);
    }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const T & value = \fCT()\fP)\fC [inline]\fP"
.PP
Definition at line 180 of file cmat.h.
.PP
.nf
    {
        initialize(M,N);
        set(value);
    }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const T * v)\fC [inline]\fP"
.PP
Definition at line 186 of file cmat.h.
.PP
.nf
    {
        initialize(M,N);
        copy(v);
    }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::\fBMatrix\fP (\fBSubscript\fP M, \fBSubscript\fP N, const char * s)\fC [inline]\fP"
.PP
Definition at line 192 of file cmat.h.
.PP
.nf
    {
        initialize(M,N);
        std::istrstream ins(s);

        Subscript i, j;

        for (i=0; i<M; i++)
            for (j=0; j<N; j++)
                ins >> row_[i][j];
    }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::~\fBMatrix\fP ()\fC [inline]\fP"
.PP
Definition at line 206 of file cmat.h.
.PP
.nf
    {
        destroy();
    }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class T> void \fBTNT::Matrix\fP< T >::copy (const T * v)\fC [inline, protected]\fP"
.PP
Definition at line 97 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::Matrix(), and TNT::Matrix< NTreal >::operator=().
.PP
.nf
    {
        Subscript N = m_ * n_;
        Subscript i;
    #ifdef TNT_UNROLL_LOOPS
        Subscript Nmod4 = N & 3;
        Subscript N4 = N - Nmod4;

        for (i=0; i<N4; i+=4)
        {
            v_[i] = v[i];
            v_[i+1] = v[i+1];
            v_[i+2] = v[i+2];
            v_[i+3] = v[i+3];
        }

        for (i=N4; i< N; i++)
            v_[i] = v[i];
    #else
        for (i=0; i< N; i++)
            v_[i] = v[i];
    #endif      

    }
.fi
.SS "template<class T> void \fBTNT::Matrix\fP< T >::destroy ()\fC [inline, protected]\fP"
.PP
Definition at line 147 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::newsize(), TNT::Matrix< NTreal >::operator=(), and TNT::Matrix< NTreal >::~Matrix().
.PP
.nf
    {     
        /* do nothing, if no memory has been previously allocated */
        if (v_ == NULL) return ;

        /* if we are here, then matrix was previously allocated */
        if (v_ != NULL) delete [] (v_);     
        if (row_ != NULL) delete [] (row_);

        /* return rowm1_ back to original value */
        rowm1_ ++;
        if (rowm1_ != NULL ) delete [] (rowm1_);
    }
.fi
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::dim (\fBSubscript\fP d) const\fC [inline]\fP"
.PP
Definition at line 255 of file cmat.h.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
       assert( d >= 1);
        assert( d <= 2);
#endif
        return (d==1) ? m_ : ((d==2) ? n_ : 0); 
    }
.fi
.SS "template<class T> void \fBTNT::Matrix\fP< T >::initialize (\fBSubscript\fP M, \fBSubscript\fP N)\fC [inline, protected]\fP"
.PP
Definition at line 70 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::Matrix(), TNT::Matrix< NTreal >::newsize(), and TNT::Matrix< NTreal >::operator=().
.PP
.nf
    {
        mn_ = M*N;
        m_ = M;
        n_ = N;

        v_ = new T[mn_]; 
        row_ = new T*[M];
        rowm1_ = new T*[M];

        assert(v_  != NULL);
        assert(row_  != NULL);
        assert(rowm1_ != NULL);

        T* p = v_;              
        vm1_ = v_ - 1;
        for (Subscript i=0; i<M; i++)
        {
            row_[i] = p;
            rowm1_[i] = p-1;
            p += N ;
            
        }

        rowm1_ -- ;     // compensate for 1-based offset
    }
.fi
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::lbound () const\fC [inline]\fP"
.PP
Definition at line 58 of file cmat.h.
.PP
.nf
{ return 1;}
.fi
.SS "template<class T> \fBMatrix\fP<T>& \fBTNT::Matrix\fP< T >::newsize (\fBSubscript\fP M, \fBSubscript\fP N)\fC [inline]\fP"
.PP
Definition at line 214 of file cmat.h.
.PP
Referenced by TNT::matmult(), and TNT::operator>>().
.PP
.nf
    {
        if (num_rows() == M && num_cols() == N)
            return *this;

        destroy();
        initialize(M,N);
        
        return *this;
    }
.fi
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::num_cols () const\fC [inline]\fP"
.PP
Definition at line 265 of file cmat.h.
.PP
Referenced by TNT::matmult(), TNT::mult_element(), TNT::Matrix< NTreal >::newsize(), NodeDistanceMatrixConditioning(), TNT::operator+(), TNT::operator-(), TNT::operator>>(), and TNT::transpose().
.PP
.nf
{ return n_; }
.fi
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::num_rows () const\fC [inline]\fP"
.PP
Definition at line 264 of file cmat.h.
.PP
Referenced by TNT::matmult(), TNT::mult_element(), TNT::Matrix< NTreal >::newsize(), NodeDistanceMatrixConditioning(), TNT::operator+(), TNT::operator-(), TNT::operator>>(), and TNT::transpose().
.PP
.nf
{ return m_; }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::operator T ** ()\fC [inline]\fP"
.PP
Definition at line 164 of file cmat.h.
.PP
References TNT::Matrix< T >::row_.
.PP
.nf
{ return  row_; }
.fi
.SS "template<class T> \fBTNT::Matrix\fP< T >::operator T ** () const\fC [inline]\fP"
.PP
Definition at line 165 of file cmat.h.
.PP
References TNT::Matrix< T >::row_.
.PP
.nf
{ return row_; }
.fi
.SS "template<class T> \fBreference\fP \fBTNT::Matrix\fP< T >::operator() (\fBSubscript\fP i)\fC [inline]\fP"
.PP
Definition at line 288 of file cmat.h.
.PP
.nf
    { 
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i <= mn_) ;
#endif
        return vm1_[i]; 
    }
.fi
.SS "template<class T> \fBconst_reference\fP \fBTNT::Matrix\fP< T >::operator() (\fBSubscript\fP i) const\fC [inline]\fP"
.PP
Definition at line 297 of file cmat.h.
.PP
.nf
    { 
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i <= mn_) ;
#endif
        return vm1_[i]; 
    }
.fi
.SS "template<class T> \fBconst_reference\fP \fBTNT::Matrix\fP< T >::operator() (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 321 of file cmat.h.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i <= m_) ;
        assert(1<=j);
        assert(j <= n_);
#endif
        return rowm1_[i][j]; 
    }
.fi
.SS "template<class T> \fBreference\fP \fBTNT::Matrix\fP< T >::operator() (\fBSubscript\fP i, \fBSubscript\fP j)\fC [inline]\fP"
.PP
Definition at line 308 of file cmat.h.
.PP
.nf
    { 
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i <= m_) ;
        assert(1<=j);
        assert(j <= n_);
#endif
        return  rowm1_[i][j]; 
    }
.fi
.SS "template<class T> \fBMatrix\fP<T>& \fBTNT::Matrix\fP< T >::operator= (const T & scalar)\fC [inline]\fP"
.PP
Definition at line 248 of file cmat.h.
.PP
.nf
    { 
        set(scalar); 
        return *this;
    }
.fi
.SS "template<class T> \fBMatrix\fP<T>& \fBTNT::Matrix\fP< T >::operator= (const \fBMatrix\fP< T > & A)\fC [inline]\fP"
.PP
Definition at line 230 of file cmat.h.
.PP
.nf
    {
        if (v_ == A.v_)
            return *this;

        if (m_ == A.m_  && n_ == A.n_)      // no need to re-alloc
            copy(A.v_);

        else
        {
            destroy();
            initialize(A.m_, A.n_);
            copy(A.v_);
        }

        return *this;
    }
.fi
.SS "template<class T> const T* \fBTNT::Matrix\fP< T >::operator[] (\fBSubscript\fP i) const\fC [inline]\fP"
.PP
Definition at line 279 of file cmat.h.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
        assert(0<=i);
        assert(i < m_) ;
#endif
        return row_[i];
    }
.fi
.SS "template<class T> T* \fBTNT::Matrix\fP< T >::operator[] (\fBSubscript\fP i)\fC [inline]\fP"
.PP
Definition at line 270 of file cmat.h.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
        assert(0<=i);
        assert(i < m_) ;
#endif
        return row_[i];
    }
.fi
.SS "template<class T> void \fBTNT::Matrix\fP< T >::set (const T & val)\fC [inline, protected]\fP"
.PP
Definition at line 122 of file cmat.h.
.PP
.nf
    {
        Subscript N = m_ * n_;
        Subscript i;
    #ifdef TNT_UNROLL_LOOPS
        Subscript Nmod4 = N & 3;
        Subscript N4 = N - Nmod4;

        for (i=0; i<N4; i+=4)
        {
            v_[i] = val;
            v_[i+1] = val;
            v_[i+2] = val;
            v_[i+3] = val; 
        }
        for (i=N4; i< N; i++)
            v_[i] = val;
    #else
        for (i=0; i< N; i++)
            v_[i] = val;          
    #endif      
    }
.fi
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::size () const\fC [inline]\fP"
.PP
Definition at line 168 of file cmat.h.
.PP
Referenced by NodeDistanceMatrixConditioning().
.PP
.nf
{ return mn_; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::\fBm_\fP\fC [protected]\fP"
.PP
Definition at line 60 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::copy(), TNT::Matrix< NTreal >::dim(), TNT::Matrix< NTreal >::initialize(), TNT::Matrix< NTreal >::Matrix(), TNT::Matrix< NTreal >::num_rows(), TNT::Matrix< NTreal >::operator()(), TNT::Matrix< NTreal >::operator=(), TNT::Matrix< NTreal >::operator[](), and TNT::Matrix< NTreal >::set().
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::\fBmn_\fP\fC [protected]\fP"
.PP
Definition at line 62 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::initialize(), TNT::Matrix< NTreal >::operator()(), and TNT::Matrix< NTreal >::size().
.SS "template<class T> \fBSubscript\fP \fBTNT::Matrix\fP< T >::\fBn_\fP\fC [protected]\fP"
.PP
Definition at line 61 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::copy(), TNT::Matrix< NTreal >::dim(), TNT::Matrix< NTreal >::initialize(), TNT::Matrix< NTreal >::Matrix(), TNT::Matrix< NTreal >::num_cols(), TNT::Matrix< NTreal >::operator()(), TNT::Matrix< NTreal >::operator=(), and TNT::Matrix< NTreal >::set().
.SS "template<class T> T** \fBTNT::Matrix\fP< T >::\fBrow_\fP\fC [protected]\fP"
.PP
Definition at line 64 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::destroy(), TNT::Matrix< NTreal >::initialize(), TNT::Matrix< NTreal >::Matrix(), TNT::Matrix< T >::operator T **(), and TNT::Matrix< NTreal >::operator[]().
.SS "template<class T> T** \fBTNT::Matrix\fP< T >::\fBrowm1_\fP\fC [protected]\fP"
.PP
Definition at line 66 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::destroy(), TNT::Matrix< NTreal >::initialize(), and TNT::Matrix< NTreal >::operator()().
.SS "template<class T> T* \fBTNT::Matrix\fP< T >::\fBv_\fP\fC [protected]\fP"
.PP
Definition at line 63 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::copy(), TNT::Matrix< NTreal >::destroy(), TNT::Matrix< NTreal >::initialize(), TNT::Matrix< NTreal >::Matrix(), TNT::Matrix< NTreal >::operator=(), and TNT::Matrix< NTreal >::set().
.SS "template<class T> T* \fBTNT::Matrix\fP< T >::\fBvm1_\fP\fC [protected]\fP"
.PP
Definition at line 65 of file cmat.h.
.PP
Referenced by TNT::Matrix< NTreal >::initialize(), and TNT::Matrix< NTreal >::operator()().

.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
