.TH "NT_multidim_array_o" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NT_multidim_array_o \- 
.PP
\fBNT_multidim_array_o\fP class Implements a regular - multidimensional, i.e.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <nt_multidim_array_obj.h>\fP
.PP
Inherits \fBNT_o\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNT_multidim_array_o\fP (\fBNTsize\fP d, \fBNTsize\fP n)"
.br
.ti -1c
.RI "\fBNT_multidim_array_o\fP (const \fBNT_multidim_array_o\fP &original)"
.br
.RI "\fIcopy constructor currently not to be implemented. \fP"
.ti -1c
.RI "const \fBNT_multidim_array_o\fP & \fBoperator=\fP (const \fBNT_multidim_array_o\fP &right)"
.br
.RI "\fIassignment operator currently not to be implemented. \fP"
.ti -1c
.RI "virtual \fB~NT_multidim_array_o\fP ()"
.br
.ti -1c
.RI "T & \fBElem\fP (const vector< \fBNTsize\fP > &coordinateVec)"
.br
.RI "\fIaccess element at given coordinate position \fP"
.ti -1c
.RI "const T & \fBElemByIndex\fP (\fBNTsize\fP index) const "
.br
.RI "\fIaccess a element with a 'meaningless' index \fP"
.ti -1c
.RI "void \fBSetAll\fP (const T &val)"
.br
.ti -1c
.RI "T & \fBElem\fP (\fBNTsize\fP index1...)"
.br
.RI "\fIaccess element at given coordinate position \fP"
.ti -1c
.RI "\fBNTsize\fP \fBTotalNumElem\fP () const "
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T> class NT_multidim_array_o< T >"
a 'dim'-diemsional hypercube with 'num' elements per dimension. 
.PP
\fBBug\fP
.RS 4
unknown 
.RE
.PP
\fBWarning:\fP
.RS 4
unknown 
.RE
.PP

.PP
Definition at line 66 of file nt_multidim_array_obj.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T> \fBNT_multidim_array_o\fP< T >::\fBNT_multidim_array_o\fP (\fBNTsize\fP d, \fBNTsize\fP n)\fC [inline]\fP"
.PP
Definition at line 69 of file nt_multidim_array_obj.h.
.PP
.nf
{
    NT_ASSERT(d > 0);
    dim = d;
    NT_ASSERT(n > 0);
    num = n;
    // implementation range checking
    /* 2DO not working as numeric_limits not implemented in gcc 2.95
    NTreal numElem = pow(n,d);
    NTreal maxIndexRange = numeric_limits<NTsize>::max();
    if (numElem >= maxIndexRange) {
        cerr <<
        'NT_multidim_array_o::NT_multidim_array_o - Error : array will contain to many elements'
        << numElem << ' for supported implementation range '    
        << maxIndexRange << ' ('<< numeric_limits<NTsize>.max()
        << '). Undefined behaviour may result.' << endl;
    }
    */
    // cache setup
    powerSeriesCacheVec.resize(dim+1);
    // = {1,num,num^2,...,num^dim}
    powerSeriesCacheVec[0] = 1;
    for (NTsize ll = 1; ll < dim+1; ll++){
        powerSeriesCacheVec[ll] = num * powerSeriesCacheVec[ll-1];
        cerr <<powerSeriesCacheVec[ll] << endl;
    }
    // memory allocation
    try {
        dataVec.resize(powerSeriesCacheVec[dim]);
    }   
    catch (bad_alloc) {
        cerr << 'NT_multidim_array_o::NT_multidim_array_o - Error : Memory exhausted by allocation of multidimensional array.'
        << '>' << powerSeriesCacheVec[dim] * sizeof(T) << ' bytes of memory are necessary for this object.'
        << endl;        
    }
}
.fi
.SS "template<class T> \fBNT_multidim_array_o\fP< T >::\fBNT_multidim_array_o\fP (const \fBNT_multidim_array_o\fP< T > & original)\fC [inline]\fP"
.PP
Definition at line 108 of file nt_multidim_array_obj.h.
.PP
.nf
{
 cerr <<'NT_multidim_array_o::(const NT_multidim_array_o) - Error : Not implemented. Not to be supported ?' << endl;
}
.fi
.SS "template<class T> virtual \fBNT_multidim_array_o\fP< T >::~\fBNT_multidim_array_o\fP ()\fC [inline, virtual]\fP"
.PP
Definition at line 123 of file nt_multidim_array_obj.h.
.PP
.nf
{
}
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class T> T& \fBNT_multidim_array_o\fP< T >::Elem (const vector< \fBNTsize\fP > & coordinateVec)\fC [inline]\fP"\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP
\fBWarning:\fP
.RS 4
no range checking done on the coordinates 
.RE
.PP
\fBBug\fP
.RS 4
unknown 
.RE
.PP

.PP
Definition at line 135 of file nt_multidim_array_obj.h.
.PP
Referenced by NT_multidim_array_o< NTsize >::Elem().
.PP
.nf
{
    NTsize hash = Hash(coordinateVec);
    NT_ASSERT (dataVec.size() >= hash);
    return dataVec[ hash ];
}
.fi
.SS "template<class T> T& \fBNT_multidim_array_o\fP< T >::Elem (\fBNTsize\fP index1...)\fC [inline]\fP"\fBParameters:\fP
.RS 4
\fInone\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP
\fBWarning:\fP
.RS 4
no range checking done on the coordinates 
.RE
.PP
\fBBug\fP
.RS 4
unknown 
.RE
.PP

.PP
Definition at line 176 of file nt_multidim_array_obj.h.
.PP
.nf
{
    vector <NTsize> coorVec(dim);
    va_list args;
    va_start(args,index1);
    for (NTsize ld=0; ld < dim; ld++){
        coorVec[ld] = va_arg(args, NTsize);
    }
    va_end(args);
    return Elem(coorVec);
}
.fi
.SS "template<class T> const T& \fBNT_multidim_array_o\fP< T >::ElemByIndex (\fBNTsize\fP index) const\fC [inline]\fP"\fBParameters:\fP
.RS 4
\fIAn\fP index that is guaranteed to touch all elements but has no assigned meaning as to the position of element in relation to others. However index $ [0,num^dim]$ is guaranteed and will touch all elements ones. 
.RE
.PP
\fBReturns:\fP
.RS 4
none 
.RE
.PP
\fBWarning:\fP
.RS 4
Arbitrary index, no information inferable from the index, might change anytime (only range remains guaranteed). 
.RE
.PP
\fBBug\fP
.RS 4
unknown 
.RE
.PP

.PP
Definition at line 154 of file nt_multidim_array_obj.h.
.PP
.nf
{
    NT_ASSERT( (index >= 0) && (index < TotalNumElem()) );
    return dataVec[index];
}
.fi
.SS "template<class T> const \fBNT_multidim_array_o\fP& \fBNT_multidim_array_o\fP< T >::operator= (const \fBNT_multidim_array_o\fP< T > & right)\fC [inline]\fP"
.PP
Definition at line 115 of file nt_multidim_array_obj.h.
.PP
.nf
{
 if (this == &right) return *this; // Gracefully handle self assignment
 cerr <<'NT_multidim_array_o::operator= - Error : Not implemented. Not to be supported ?' << endl;
 return *this;
}
.fi
.SS "template<class T> void \fBNT_multidim_array_o\fP< T >::SetAll (const T & val)\fC [inline]\fP"
.PP
Definition at line 162 of file nt_multidim_array_obj.h.
.PP
.nf
{
    for (NTsize ll = 0; ll < TotalNumElem(); ll++){
        dataVec[ll] = val;
    }
}
.fi
.SS "template<class T> \fBNTsize\fP \fBNT_multidim_array_o\fP< T >::TotalNumElem () const\fC [inline]\fP"
.PP
Definition at line 190 of file nt_multidim_array_obj.h.
.PP
Referenced by NT_multidim_array_o< NTsize >::ElemByIndex(), and NT_multidim_array_o< NTsize >::SetAll().
.PP
.nf
{
    return powerSeriesCacheVec[dim];
}
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
