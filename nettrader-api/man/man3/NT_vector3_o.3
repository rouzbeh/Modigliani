.TH "NT_vector3_o" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NT_vector3_o \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <nt_vector3_obj.h>\fP
.PP
Inherits \fBNT_o\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNT_vector3_o\fP ()"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP (\fBNTreal\fP pX, \fBNTreal\fP pY, \fBNTreal\fP pZ)"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP (const \fBNT_vector3_o\fP &original)"
.br
.ti -1c
.RI "const \fBNT_vector3_o\fP & \fBoperator=\fP (const \fBNT_vector3_o\fP &right)"
.br
.ti -1c
.RI "\fB~NT_vector3_o\fP ()"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBoperator+\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBoperator-\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.ti -1c
.RI "\fBNT_vector3_o\fP & \fBoperator+=\fP (const \fBNT_vector3_o\fP &pV)"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP & \fBoperator-=\fP (const \fBNT_vector3_o\fP &pV)"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBX\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.RI "\fIcross product with another vector (returns a scalar) \fP"
.ti -1c
.RI "\fBNTreal\fP \fBoperator()\fP (\fBNTint\fP component) const "
.br
.RI "\fIAccess vector components 1..dimension slower and safer. \fP"
.ti -1c
.RI "\fBNTreal\fP & \fBoperator[]\fP (\fBNTint\fP component)"
.br
.RI "\fIAccess vector components read/write. \fP"
.ti -1c
.RI "\fBNTreal\fP \fBoperator[]\fP (\fBNTint\fP component) const "
.br
.RI "\fIAccess vector components read-only. \fP"
.ti -1c
.RI "\fBNT_vector3_o\fP \fBCross\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.ti -1c
.RI "\fBNTreal\fP \fBoperator*\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.RI "\fIdot product with another vector (returns a vector) \fP"
.ti -1c
.RI "\fBNTreal\fP \fBDot\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBoperator*\fP (const \fBNTreal\fP pR) const "
.br
.RI "\fIscalar muliplication from the right \fP"
.ti -1c
.RI "\fBNT_vector3_o\fP & \fBoperator*=\fP (const \fBNTreal\fP pR)"
.br
.RI "\fIscalar muliplication from the right applied to *this \fP"
.ti -1c
.RI "\fBNT_vector3_o\fP \fBXYZrotation\fP (const \fBNT_vector3_o\fP &rotV) const "
.br
.RI "\fIReturn a vector rotated around X, Y and then Z axis. \fP"
.ti -1c
.RI "\fBNTreal\fP \fBLenSqr\fP (void) const "
.br
.RI "\fIsquared euclidean length of vector \fP"
.ti -1c
.RI "\fBNTreal\fP \fBLength\fP (void) const "
.br
.RI "\fIeuclidean length of vector \fP"
.ti -1c
.RI "void \fBNorm\fP ()"
.br
.RI "\fINormalize vector Normlises vector, or unmodified if length is 0. \fP"
.ti -1c
.RI "\fBNT_vector3_o\fP \fBNorm\fP () const "
.br
.RI "\fIReturn A normalized version of vector. \fP"
.ti -1c
.RI "\fBNT_vector3_o\fP \fBProj\fP (const \fBNT_vector3_o\fP &pV)"
.br
.RI "\fIprojection (componeNT of *this parallel to pV) Note: componeNT perpendicular to pV is: *this - Proj(pV) \fP"
.ti -1c
.RI "\fBNTreal\fP \fBCosAng\fP (const \fBNT_vector3_o\fP &pV)"
.br
.RI "\fIcosine of the angle between two NT_vector3_os \fP"
.ti -1c
.RI "\fBNTreal\fP \fBoperator^\fP (const \fBNT_vector3_o\fP &right)"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBBaseVectorAngle\fP () const "
.br
.RI "\fIAngle between the 3D-unit bases and the vector. \fP"
.ti -1c
.RI "void \fBset_elem\fP (const \fBNTreal\fP *elemVec)"
.br
.ti -1c
.RI "\fBNTuint\fP \fB_dimension\fP () const "
.br
.RI "\fIreturn the dimension, which is 3 \fP"
.ti -1c
.RI "\fBNTreal\fP * \fB_elem\fP () const "
.br
.RI "\fIreturn a pointer to a DELETABLE NTreal[3] \fP"
.ti -1c
.RI "\fBNTbool\fP \fBoperator==\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.RI "\fIcomparison \fP"
.ti -1c
.RI "\fBNTbool\fP \fBoperator!=\fP (const \fBNT_vector3_o\fP &pV) const "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBNTreal\fP \fBx\fP"
.br
.ti -1c
.RI "\fBNTreal\fP \fBy\fP"
.br
.ti -1c
.RI "\fBNTreal\fP \fBz\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBNT_vector3_o\fP \fBCross\fP (const \fBNT_vector3_o\fP &p1, const \fBNT_vector3_o\fP &p2)"
.br
.ti -1c
.RI "\fBNTreal\fP \fBDot\fP (const \fBNT_vector3_o\fP &p1, const \fBNT_vector3_o\fP &p2)"
.br
.ti -1c
.RI "\fBNT_vector3_o\fP \fBoperator*\fP (const \fBNTreal\fP pR, const \fBNT_vector3_o\fP pV)"
.br
.RI "\fIscalar muliplication from the left \fP"
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &pStr, const \fBNT_vector3_o\fP &pV)"
.br
.RI "\fIpretty print components \fP"
.ti -1c
.RI "istream & \fBoperator>>\fP (istream pStr, \fBNT_vector3_o\fP &pV)"
.br
.RI "\fIread components from stream pStr \fP"
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 130 of file nt_vector3_obj.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "NT_vector3_o::NT_vector3_o ()\fC [inline]\fP"
.PP
Definition at line 136 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
Referenced by Norm().
.PP
.nf
{ x=y=z=0; }                   
.fi
.SS "NT_vector3_o::NT_vector3_o (\fBNTreal\fP pX, \fBNTreal\fP pY, \fBNTreal\fP pZ)\fC [inline]\fP"
.PP
Definition at line 138 of file nt_vector3_obj.h.
.PP
.nf
    : 
    x(pX), 
    y(pY), 
    z(pZ) 
    {
    }
.fi
.SS "NT_vector3_o::NT_vector3_o (const \fBNT_vector3_o\fP & original)\fC [inline]\fP"
.PP
Definition at line 147 of file nt_vector3_obj.h.
.PP
.nf
    :
    x(original.x),
    y(original.y),
    z(original.z)
    {
    }
.fi
.SS "NT_vector3_o::~NT_vector3_o ()\fC [inline]\fP"
.PP
Definition at line 168 of file nt_vector3_obj.h.
.PP
.nf
    {
    }
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBNTuint\fP NT_vector3_o::_dimension () const\fC [inline]\fP"
.PP
Definition at line 364 of file nt_vector3_obj.h.
.PP
.nf
{ return 3;}
.fi
.SS "\fBNTreal\fP* NT_vector3_o::_elem () const\fC [inline]\fP"
.PP
Definition at line 366 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
                        { NTreal * tmpPtr = new NTreal[3];
  tmpPtr[0] = x;tmpPtr[1] = y;tmpPtr[2] = z; return tmpPtr;}
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::BaseVectorAngle () const\fC [inline]\fP"\fBReturns:\fP
.RS 4
\fBNT_vector3_o\fP each component contains the angle between the vector and the corresponding base vector 
.RE
.PP

.PP
Definition at line 342 of file nt_vector3_obj.h.
.PP
.nf
{
  NT_vector3_o oDirection;
  for (NTuint ll=0; ll < 3; ll++){
    NT_vector3_o oUnit;
    oUnit[ll]=1.0;
    oDirection[ll] = oUnit^(*this);
  }
  return oDirection;
}
.fi
.SS "\fBNTreal\fP NT_vector3_o::CosAng (const \fBNT_vector3_o\fP & pV)\fC [inline]\fP"
.PP
Definition at line 325 of file nt_vector3_obj.h.
.PP
References Dot(), and Length().
.PP
.nf
  { return this->Dot(pV) / (Length() * pV.Length()); }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::Cross (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 255 of file nt_vector3_obj.h.
.PP
References X().
.PP
.nf
  { return (*this).X(pV); }
.fi
.SS "\fBNTreal\fP NT_vector3_o::Dot (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 265 of file nt_vector3_obj.h.
.PP
Referenced by CosAng(), and Proj().
.PP
.nf
  { return (*this)*(pV);}   
.fi
.SS "\fBNTreal\fP NT_vector3_o::Length (void) const\fC [inline]\fP"
.PP
Definition at line 294 of file nt_vector3_obj.h.
.PP
References LenSqr().
.PP
Referenced by CosAng(), and Norm().
.PP
.nf
  { return sqrt(LenSqr()); }
.fi
.SS "\fBNTreal\fP NT_vector3_o::LenSqr (void) const\fC [inline]\fP"
.PP
Definition at line 290 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
Referenced by Length(), and Proj().
.PP
.nf
  { return x*x+y*y+z*z; }
.fi
.SS "void NT_vector3_o::Norm ()\fC [inline]\fP"
.PP
Definition at line 300 of file nt_vector3_obj.h.
.PP
References Length(), x, y, and z.
.PP
.nf
  {
    NTreal tmpLen = Length();
    if (tmpLen > 0) {
        x /= tmpLen;
        y /= tmpLen;
        z /= tmpLen;
    }
  }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::Norm () const\fC [inline]\fP"
.PP
Definition at line 311 of file nt_vector3_obj.h.
.PP
References Length(), NT_OriginVec3(), NT_vector3_o(), x, y, and z.
.PP
.nf
  { 
    NTreal tmpLen = Length();
    if (tmpLen > 0) return NT_vector3_o(x/tmpLen, y/tmpLen, z/tmpLen);
    else return NT_OriginVec3();
  }
.fi
.SS "\fBNTbool\fP NT_vector3_o::operator!= (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 373 of file nt_vector3_obj.h.
.PP
References NT_FALSE, NT_TRUE, x, y, and z.
.PP
.nf
  { return (x!=pV.x || y!=pV.y || z!=pV.z) ? NT_TRUE: NT_FALSE; }
.fi
.SS "\fBNTreal\fP NT_vector3_o::operator() (\fBNTint\fP component) const\fC [inline]\fP"
.PP
Definition at line 195 of file nt_vector3_obj.h.
.PP
References NT_ASSERT_BOUNDS, x, y, and z.
.PP
.nf
{ 
  NT_ASSERT_BOUNDS(component, 1, 3);
switch (component){
    case 1:
        return x;
        break;
    case 2:
        return y;
        break;
    case 3:
        return z;
        break;
    default:
        return 0.0;
        break;
        }
}
.fi
.SS "\fBNTreal\fP NT_vector3_o::operator* (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 262 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { return x*pV.x + y*pV.y + z*pV.z; }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::operator* (const \fBNTreal\fP pR) const\fC [inline]\fP"
.PP
Definition at line 272 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { NT_vector3_o out( x*pR, y*pR, z*pR ); return out; }
.fi
.SS "\fBNT_vector3_o\fP& NT_vector3_o::operator*= (const \fBNTreal\fP pR)\fC [inline]\fP"
.PP
Definition at line 280 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { x*=pR; y*=pR; z*=pR; return *this; }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::operator+ (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 175 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { NT_vector3_o out( x+pV.x, y+pV.y, z+pV.z ); return out; }
.fi
.SS "\fBNT_vector3_o\fP& NT_vector3_o::operator+= (const \fBNT_vector3_o\fP & pV)\fC [inline]\fP"
.PP
Definition at line 181 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { x+=pV.x; y+=pV.y; z+=pV.z; return *this; }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::operator- (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 178 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { NT_vector3_o out( x-pV.x, y-pV.y, z-pV.z ); return out; }
.fi
.SS "\fBNT_vector3_o\fP& NT_vector3_o::operator-= (const \fBNT_vector3_o\fP & pV)\fC [inline]\fP"
.PP
Definition at line 184 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
  { x-=pV.x; y-=pV.y; z-=pV.z; return *this; }
.fi
.SS "const \fBNT_vector3_o\fP& NT_vector3_o::operator= (const \fBNT_vector3_o\fP & right)\fC [inline]\fP"
.PP
Definition at line 156 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
    {
        if (this == &right) return *this; // Gracefully handle self assignment
        // add assignment code here
        x = right.x;
        y = right.y;
        z = right.z;
        return *this;
    }
.fi
.SS "\fBNTbool\fP NT_vector3_o::operator== (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 370 of file nt_vector3_obj.h.
.PP
References NT_FALSE, NT_TRUE, x, y, and z.
.PP
.nf
  { return (x==pV.x && y==pV.y && z==pV.z) ? NT_TRUE: NT_FALSE; }
.fi
.SS "\fBNTreal\fP NT_vector3_o::operator[] (\fBNTint\fP component) const\fC [inline]\fP"
.PP
Definition at line 237 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
{ 
 switch (component){
    case 0:
        return x;
        break;
    case 1:
        return y;
        break;
    case 2:
        return z;
        break;
    default:
        return x;
        break;  
        }
}
.fi
.SS "\fBNTreal\fP& NT_vector3_o::operator[] (\fBNTint\fP component)\fC [inline]\fP"
.PP
Definition at line 217 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
{ 
 switch (component){
    case 0:
        return x;
        break;
    case 1:
        return y;
        break;
    case 2:
        return z;
        break;
    default:
        return x;
        break;  
        }
}
.fi
.SS "\fBNTreal\fP NT_vector3_o::operator^ (const \fBNT_vector3_o\fP & right)\fC [inline]\fP"
.PP
Definition at line 330 of file nt_vector3_obj.h.
.PP
References NT_SELF.
.PP
.nf
{
  return NT_SELF.CosAng(right);
}
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::Proj (const \fBNT_vector3_o\fP & pV)\fC [inline]\fP"
.PP
Definition at line 321 of file nt_vector3_obj.h.
.PP
References Dot(), and LenSqr().
.PP
.nf
  { NT_vector3_o out( pV * (this->Dot(pV) / pV.LenSqr()) ); return out; }
.fi
.SS "void NT_vector3_o::set_elem (const \fBNTreal\fP * elemVec)\fC [inline]\fP"
.PP
Definition at line 356 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
.nf
{
  x = elemVec[0];
  y = elemVec[1];
  z = elemVec[2];
}
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::X (const \fBNT_vector3_o\fP & pV) const\fC [inline]\fP"
.PP
Definition at line 188 of file nt_vector3_obj.h.
.PP
References x, y, and z.
.PP
Referenced by Cross().
.PP
.nf
  { NT_vector3_o out( y*pV.z-z*pV.y, z*pV.x-x*pV.z, x*pV.y-y*pV.x ); 
  return out; }
.fi
.SS "\fBNT_vector3_o\fP NT_vector3_o::XYZrotation (const \fBNT_vector3_o\fP & rotV) const"The corresponding rotation angles phi, theta and psi are given in degree. 
.SH "Friends And Related Function Documentation"
.PP 
.SS "\fBNT_vector3_o\fP Cross (const \fBNT_vector3_o\fP & p1, const \fBNT_vector3_o\fP & p2)\fC [friend]\fP"
.PP
Definition at line 258 of file nt_vector3_obj.h.
.PP
.nf
  { return p1.X(p2); }
.fi
.SS "\fBNTreal\fP Dot (const \fBNT_vector3_o\fP & p1, const \fBNT_vector3_o\fP & p2)\fC [friend]\fP"
.PP
Definition at line 268 of file nt_vector3_obj.h.
.PP
.nf
  { return p1 * p2; }
.fi
.SS "\fBNT_vector3_o\fP operator* (const \fBNTreal\fP pR, const \fBNT_vector3_o\fP pV)\fC [friend]\fP"
.PP
Definition at line 276 of file nt_vector3_obj.h.
.PP
.nf
  { NT_vector3_o out( pV.x*pR, pV.y*pR, pV.z*pR ); return out; }
.fi
.SS "ostream& operator<< (ostream & pStr, const \fBNT_vector3_o\fP & pV)\fC [friend]\fP"
.PP
Definition at line 378 of file nt_vector3_obj.h.
.PP
.nf
  { return (pStr << '(' << pV.x << ',' << pV.y << ',' << pV.z << ')'); }
.fi
.SS "istream& operator>> (istream pStr, \fBNT_vector3_o\fP & pV)\fC [friend]\fP"
.PP
Definition at line 382 of file nt_vector3_obj.h.
.PP
.nf
        { return (pStr >> pV.x >> pV.y >> pV.z); }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBNTreal\fP \fBNT_vector3_o::x\fP"
.PP
Definition at line 133 of file nt_vector3_obj.h.
.PP
Referenced by _elem(), LenSqr(), Norm(), NT_vector3_o(), operator!=(), operator()(), operator*(), operator*=(), operator+(), operator+=(), operator-(), operator-=(), operator=(), operator==(), operator[](), set_elem(), NT3D_object_o::SetRotationX(), NT3D_object_o::SetTranslationX(), and X().
.SS "\fBNTreal\fP \fBNT_vector3_o::y\fP"
.PP
Definition at line 133 of file nt_vector3_obj.h.
.PP
Referenced by _elem(), LenSqr(), Norm(), NT_vector3_o(), operator!=(), operator()(), operator*(), operator*=(), operator+(), operator+=(), operator-(), operator-=(), operator=(), operator==(), operator[](), set_elem(), NT3D_object_o::SetRotationY(), NT3D_object_o::SetTranslationY(), and X().
.SS "\fBNTreal\fP \fBNT_vector3_o::z\fP"
.PP
Definition at line 133 of file nt_vector3_obj.h.
.PP
Referenced by _elem(), LenSqr(), Norm(), NT_vector3_o(), operator!=(), operator()(), operator*(), operator*=(), operator+(), operator+=(), operator-(), operator-=(), operator=(), operator==(), operator[](), set_elem(), NT3D_object_o::SetRotationZ(), NT3D_object_o::SetTranslationZ(), and X().

.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
