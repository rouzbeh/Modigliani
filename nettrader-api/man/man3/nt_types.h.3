.TH "nt_types.h" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nt_types.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'nt_main.h'\fP
.br
\fC#include <string>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <iostream>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBNT_CERR\fP(L, M)   (NT_cerr( NT_TALKLEVEL, L , M ))"
.br
.ti -1c
.RI "#define \fBM_PI\fP   3.14159265358979323846"
.br
.ti -1c
.RI "#define \fBM_E\fP   2.7182818284590452354"
.br
.ti -1c
.RI "#define \fBM_SQRT2\fP   1.41421356237309504880"
.br
.ti -1c
.RI "#define \fBNT_SELF\fP   (*this)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef float \fBNTfloat\fP"
.br
.ti -1c
.RI "typedef double \fBNTdouble\fP"
.br
.ti -1c
.RI "typedef \fBNTdouble\fP \fBNTreal\fP"
.br
.ti -1c
.RI "typedef int \fBNTint\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBNTuint\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBNTsize\fP"
.br
.ti -1c
.RI "typedef long int \fBNTlong\fP"
.br
.ti -1c
.RI "typedef \fBNTlong\fP \fBNTnum\fP"
.br
.ti -1c
.RI "typedef long int \fBNTid\fP"
.br
.ti -1c
.RI "typedef char \fBNTchar\fP"
.br
.ti -1c
.RI "typedef char * \fBNT_string\fP"
.br
.ti -1c
.RI "typedef string \fBNT_string_o\fP"
.br
.ti -1c
.RI "typedef bool \fBNTbool\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBNTreturn\fP { \fBNT_SUCCESS\fP, \fBNT_FAIL\fP, \fBNT_NOT_IMPLEMENTED\fP, \fBNT_NOT_DERIVED\fP, \fBNT_OUT_OF_MEMORY\fP, \fBNT_FILE_NOT_FOUND\fP, \fBNT_WRONG_FILE_TYPE\fP, \fBNT_BAD_FILE\fP, \fBNT_EMPTY_FILE\fP, \fBNT_BAD_DATA\fP, \fBNT_READ_FAIL\fP, \fBNT_NO_SPACE_LEFT\fP, \fBNT_WRITE_FAIL\fP, \fBNT_NOT_EXISTING_NODE\fP, \fBNT_NOT_EXISTING_EDGE\fP, \fBNT_PARAM_OUT_OF_RANGE\fP, \fBNT_PARAM_UNSUPPORTED\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBNT_cerr\fP (\fBNTsize\fP currentTalkLevel, \fBNTsize\fP talkLevel, string message)"
.br
.ti -1c
.RI "template<class T > T \fBNT_Max\fP (T a, T b)"
.br
.ti -1c
.RI "template<class T > T \fBNT_Min\fP (T a, T b)"
.br
.ti -1c
.RI "template<class T > T \fBNT_Abs\fP (T x)"
.br
.ti -1c
.RI "template<class T > void \fBNT_Swap\fP (T &a, T &b)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBNTbool\fP \fBNT_FALSE\fP = (\fBNTbool\fP) false"
.br
.ti -1c
.RI "const \fBNTbool\fP \fBNT_TRUE\fP = (\fBNTbool\fP) true"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define M_E   2.7182818284590452354"
.PP
Definition at line 176 of file nt_types.h.
.SS "#define M_PI   3.14159265358979323846"
.PP
Definition at line 173 of file nt_types.h.
.SS "#define M_SQRT2   1.41421356237309504880"
.PP
Definition at line 179 of file nt_types.h.
.SS "#define NT_CERR(L, M)   (NT_cerr( NT_TALKLEVEL, L , M ))"
.PP
Definition at line 170 of file nt_types.h.
.PP
Referenced by NT3D_hierarchic_object_o::ControlObj(), NT3D_solid_o::DrawSolidObj(), and NT3D_surfaced_object_o::DrawSurfacedObj().
.SS "#define NT_SELF   (*this)"
.PP
Definition at line 182 of file nt_types.h.
.PP
Referenced by NT_vector3_o::operator^().
.SH "Typedef Documentation"
.PP 
.SS "typedef char* \fBNT_string\fP"
.PP
Definition at line 144 of file nt_types.h.
.SS "typedef string \fBNT_string_o\fP"
.PP
Definition at line 145 of file nt_types.h.
.SS "typedef bool \fBNTbool\fP"
.PP
Definition at line 147 of file nt_types.h.
.SS "typedef char \fBNTchar\fP"
.PP
Definition at line 143 of file nt_types.h.
.SS "typedef double \fBNTdouble\fP"
.PP
Definition at line 132 of file nt_types.h.
.SS "typedef float \fBNTfloat\fP"
.PP
Definition at line 131 of file nt_types.h.
.SS "typedef long int \fBNTid\fP"
.PP
Definition at line 141 of file nt_types.h.
.SS "typedef int \fBNTint\fP"
.PP
Definition at line 135 of file nt_types.h.
.SS "typedef long int \fBNTlong\fP"
.PP
Definition at line 138 of file nt_types.h.
.SS "typedef \fBNTlong\fP \fBNTnum\fP"
.PP
Definition at line 139 of file nt_types.h.
.SS "typedef \fBNTdouble\fP \fBNTreal\fP"
.PP
Definition at line 133 of file nt_types.h.
.SS "typedef unsigned int \fBNTsize\fP"
.PP
Definition at line 137 of file nt_types.h.
.SS "typedef unsigned int \fBNTuint\fP"
.PP
Definition at line 136 of file nt_types.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBNTreturn\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINT_SUCCESS \fP\fP
.TP
\fB\fINT_FAIL \fP\fP
.TP
\fB\fINT_NOT_IMPLEMENTED \fP\fP
.TP
\fB\fINT_NOT_DERIVED \fP\fP
.TP
\fB\fINT_OUT_OF_MEMORY \fP\fP
.TP
\fB\fINT_FILE_NOT_FOUND \fP\fP
.TP
\fB\fINT_WRONG_FILE_TYPE \fP\fP
.TP
\fB\fINT_BAD_FILE \fP\fP
.TP
\fB\fINT_EMPTY_FILE \fP\fP
.TP
\fB\fINT_BAD_DATA \fP\fP
.TP
\fB\fINT_READ_FAIL \fP\fP
.TP
\fB\fINT_NO_SPACE_LEFT \fP\fP
.TP
\fB\fINT_WRITE_FAIL \fP\fP
.TP
\fB\fINT_NOT_EXISTING_NODE \fP\fP
.TP
\fB\fINT_NOT_EXISTING_EDGE \fP\fP
.TP
\fB\fINT_PARAM_OUT_OF_RANGE \fP\fP
.TP
\fB\fINT_PARAM_UNSUPPORTED \fP\fP

.PP
Definition at line 151 of file nt_types.h.
.PP
.nf
              {NT_SUCCESS, NT_FAIL, NT_NOT_IMPLEMENTED, NT_NOT_DERIVED, /* SUCCESS FAIL ... , used for return 'error codes' of funcs */
               NT_OUT_OF_MEMORY, /* memory operations */
               NT_FILE_NOT_FOUND, NT_WRONG_FILE_TYPE, NT_BAD_FILE, NT_EMPTY_FILE, NT_BAD_DATA, NT_READ_FAIL, NT_NO_SPACE_LEFT, NT_WRITE_FAIL, /* file op returns */
               NT_NOT_EXISTING_NODE, NT_NOT_EXISTING_EDGE, /* NTG graph operations */
           NT_PARAM_OUT_OF_RANGE, NT_PARAM_UNSUPPORTED}; /* parameter errors */
.fi
.SH "Function Documentation"
.PP 
.SS "template<class T > T NT_Abs (T x)\fC [inline]\fP"
.PP
Definition at line 186 of file nt_types.h.
.PP
.nf
{return (x) >= 0 ? (x) : -(x);}
.fi
.SS "void NT_cerr (\fBNTsize\fP currentTalkLevel, \fBNTsize\fP talkLevel, string message)\fC [inline]\fP"
.PP
Definition at line 165 of file nt_types.h.
.PP
.nf
{
    if (currentTalkLevel >= talkLevel) cerr << message << endl;
}
.fi
.SS "template<class T > T NT_Max (T a, T b)\fC [inline]\fP"
.PP
Definition at line 184 of file nt_types.h.
.PP
.nf
{ return a > b ? a : b; }
.fi
.SS "template<class T > T NT_Min (T a, T b)\fC [inline]\fP"
.PP
Definition at line 185 of file nt_types.h.
.PP
.nf
{ return a < b ? a : b; }
.fi
.SS "template<class T > void NT_Swap (T & a, T & b)\fC [inline]\fP"
.PP
Definition at line 187 of file nt_types.h.
.PP
.nf
{ T temp = a; a = b; b = temp;}
.fi
.SH "Variable Documentation"
.PP 
.SS "const \fBNTbool\fP \fBNT_FALSE\fP = (\fBNTbool\fP) false"
.PP
Definition at line 148 of file nt_types.h.
.PP
Referenced by NT_vector3_o::operator!=(), and NT_vector3_o::operator==().
.SS "const \fBNTbool\fP \fBNT_TRUE\fP = (\fBNTbool\fP) true"
.PP
Definition at line 149 of file nt_types.h.
.PP
Referenced by NTG_graph_o::GraphConsistency(), NT_vector3_o::operator!=(), and NT_vector3_o::operator==().
.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
