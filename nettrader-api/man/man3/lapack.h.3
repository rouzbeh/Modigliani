.TH "lapack.h" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lapack.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'tnt/fortran.h'\fP
.br
\fC#include 'tnt/vec.h'\fP
.br
\fC#include 'tnt/fmat.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBF77_DGESV\fP   dgesv_"
.br
.ti -1c
.RI "#define \fBF77_DGELS\fP   dgels_"
.br
.ti -1c
.RI "#define \fBF77_DSYEV\fP   dsyev_"
.br
.ti -1c
.RI "#define \fBF77_DGEEV\fP   dgeev_"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBF77_DGESV\fP (\fBcfi_\fP N, \fBcfi_\fP nrhs, \fBfda_\fP A, \fBcfi_\fP lda, \fBfia_\fP ipiv, \fBfda_\fP b, \fBcfi_\fP ldb, \fBfi_\fP info)"
.br
.ti -1c
.RI "void \fBF77_DGELS\fP (\fBcfch_\fP trans, \fBcfi_\fP M, \fBcfi_\fP N, \fBcfi_\fP nrhs, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP B, \fBcfi_\fP ldb, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.br
.ti -1c
.RI "void \fBF77_DSYEV\fP (\fBcfch_\fP jobz, \fBcfch_\fP uplo, \fBcfi_\fP N, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP W, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.br
.ti -1c
.RI "void \fBF77_DGEEV\fP (\fBcfch_\fP jobvl, \fBcfch_\fP jobvr, \fBcfi_\fP N, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP wr, \fBfda_\fP wi, \fBfda_\fP vl, \fBcfi_\fP ldvl, \fBfda_\fP vr, \fBcfi_\fP ldvr, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.br
.ti -1c
.RI "\fBVector\fP< double > \fBLapack_LU_linear_solve\fP (const \fBFortran_Matrix\fP< double > &A, const \fBVector\fP< double > &b)"
.br
.ti -1c
.RI "\fBVector\fP< double > \fBLapack_LLS_QR_linear_solve\fP (const \fBFortran_Matrix\fP< double > &A, const \fBVector\fP< double > &b)"
.br
.ti -1c
.RI "\fBVector\fP< double > \fBUpper_symmetric_eigenvalue_solve\fP (const \fBFortran_Matrix\fP< double > &A)"
.br
.ti -1c
.RI "int \fBeigenvalue_solve\fP (const \fBFortran_Matrix\fP< double > &A, \fBVector\fP< double > &wr, \fBVector\fP< double > &wi)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define F77_DGEEV   dgeev_"
.PP
Definition at line 42 of file lapack.h.
.PP
Referenced by eigenvalue_solve().
.SS "#define F77_DGELS   dgels_"
.PP
Definition at line 40 of file lapack.h.
.PP
Referenced by Lapack_LLS_QR_linear_solve().
.SS "#define F77_DGESV   dgesv_"
.PP
Definition at line 39 of file lapack.h.
.PP
Referenced by Lapack_LU_linear_solve().
.SS "#define F77_DSYEV   dsyev_"
.PP
Definition at line 41 of file lapack.h.
.PP
Referenced by Upper_symmetric_eigenvalue_solve().
.SH "Function Documentation"
.PP 
.SS "int eigenvalue_solve (const \fBFortran_Matrix\fP< double > & A, \fBVector\fP< double > & wr, \fBVector\fP< double > & wi)"
.PP
Definition at line 148 of file lapack.h.
.PP
References F77_DGEEV, TNT::Vector< T >::newsize(), TNT::Fortran_Matrix< T >::num_cols(), and TNT::Fortran_Matrix< T >::num_rows().
.PP
.nf
{
    char jobvl = 'N';
    char jobvr = 'N';

    Fortran_integer N = A.num_rows();


    assert(N == A.num_cols());
    
    if (N<1) return 1;

    Fortran_Matrix<double> vl(1,N);  /* should be NxN ? **** */
    Fortran_Matrix<double> vr(1,N);  
    Fortran_integer one = 1;

    Fortran_integer worksize = 5*N;
    Fortran_integer info = 0;
    Vector<double> work(worksize, 0.0);
    Fortran_Matrix<double> Tmp = A;

    wr.newsize(N);
    wi.newsize(N);

//  void F77_DGEEV(cfch_ jobvl, cfch_ jobvr, cfi_ N, fda_ A, cfi_ lda,
//      fda_ wr, fda_ wi, fda_ vl, cfi_ ldvl, fda_ vr, 
//      cfi_ ldvr, fda_ work, cfi_ lwork, fi_ info);

    F77_DGEEV(&jobvl, &jobvr, &N, &Tmp(1,1), &N, &(wr(1)),
        &(wi(1)), &(vl(1,1)), &one, &(vr(1,1)), &one,
        &(work(1)), &worksize, &info);

    return (info==0 ? 0: 1);
}
.fi
.SS "void F77_DGEEV (\fBcfch_\fP jobvl, \fBcfch_\fP jobvr, \fBcfi_\fP N, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP wr, \fBfda_\fP wi, \fBfda_\fP vl, \fBcfi_\fP ldvl, \fBfda_\fP vr, \fBcfi_\fP ldvr, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.SS "void F77_DGELS (\fBcfch_\fP trans, \fBcfi_\fP M, \fBcfi_\fP N, \fBcfi_\fP nrhs, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP B, \fBcfi_\fP ldb, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.SS "void F77_DGESV (\fBcfi_\fP N, \fBcfi_\fP nrhs, \fBfda_\fP A, \fBcfi_\fP lda, \fBfia_\fP ipiv, \fBfda_\fP b, \fBcfi_\fP ldb, \fBfi_\fP info)"
.SS "void F77_DSYEV (\fBcfch_\fP jobz, \fBcfch_\fP uplo, \fBcfi_\fP N, \fBfda_\fP A, \fBcfi_\fP lda, \fBfda_\fP W, \fBfda_\fP work, \fBcfi_\fP lwork, \fBfi_\fP info)"
.SS "\fBVector\fP<double> Lapack_LLS_QR_linear_solve (const \fBFortran_Matrix\fP< double > & A, const \fBVector\fP< double > & b)"
.PP
Definition at line 96 of file lapack.h.
.PP
References F77_DGELS, TNT::Fortran_Matrix< T >::num_cols(), and TNT::Fortran_Matrix< T >::num_rows().
.PP
.nf
{
    const Fortran_integer one=1;
    Subscript M=A.num_rows();
    Subscript N=A.num_cols();

    Fortran_Matrix<double> Tmp(A);
    Vector<double> x(b);
    Fortran_integer info = 0;

    char transp = 'N';
    Fortran_integer lwork = 5 * (M+N);      // temporary work space
    Vector<double> work(lwork);

    F77_DGELS(&transp, &M, &N, &one, &Tmp(1,1), &M, &x(1), &M,  &work(1),
        &lwork, &info); 

    if (info != 0) return Vector<double>(0);
    else
        return x;
}
.fi
.SS "\fBVector\fP<double> Lapack_LU_linear_solve (const \fBFortran_Matrix\fP< double > & A, const \fBVector\fP< double > & b)"
.PP
Definition at line 75 of file lapack.h.
.PP
References F77_DGESV, TNT::Fortran_Matrix< T >::num_cols(), and TNT::Fortran_Matrix< T >::num_rows().
.PP
.nf
{
    const Fortran_integer one=1;
    Subscript M=A.num_rows();
    Subscript N=A.num_cols();

    Fortran_Matrix<double> Tmp(A);
    Vector<double> x(b);
    Vector<Fortran_integer> index(M);
    Fortran_integer info = 0;

    F77_DGESV(&N, &one, &Tmp(1,1), &M, &index(1), &x(1), &M, &info);    

    if (info != 0) return Vector<double>(0);
    else
        return x;
}
.fi
.SS "\fBVector\fP<double> Upper_symmetric_eigenvalue_solve (const \fBFortran_Matrix\fP< double > & A)"
.PP
Definition at line 123 of file lapack.h.
.PP
References TNT::Vector< T >::begin(), TNT::Fortran_Matrix< T >::begin(), F77_DSYEV, TNT::Fortran_Matrix< T >::num_cols(), and TNT::Fortran_Matrix< T >::num_rows().
.PP
.nf
{
    char jobz = 'N';
    char uplo = 'U';
    Subscript N = A.num_rows();

    assert(N == A.num_cols());

    Vector<double> eigvals(N);
    Fortran_integer worksize = 3*N;
    Fortran_integer info = 0;
    Vector<double> work(worksize);
    Fortran_Matrix<double> Tmp = A;

    F77_DSYEV(&jobz, &uplo, &N, &Tmp(1,1), &N, eigvals.begin(), work.begin(),
        &worksize, &info);

    if (info != 0) return Vector<double>();
    else
        return eigvals;
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
