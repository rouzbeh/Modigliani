.TH "TNT::UnitUpperTriangularView" 3 "Wed Nov 17 2010" "Version 0.5" "NetTrader" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TNT::UnitUpperTriangularView \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <triang.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef MaTRiX::const_reference \fBconst_reference\fP"
.br
.ti -1c
.RI "typedef MaTRiX::element_type \fBelement_type\fP"
.br
.ti -1c
.RI "typedef MaTRiX::element_type \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef \fBelement_type\fP \fBT\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSubscript\fP \fBlbound\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBdim\fP (\fBSubscript\fP d) const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_rows\fP () const "
.br
.ti -1c
.RI "\fBSubscript\fP \fBnum_cols\fP () const "
.br
.ti -1c
.RI "\fBUnitUpperTriangularView\fP (MaTRiX &A)"
.br
.ti -1c
.RI "\fBconst_reference\fP \fBget\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.ti -1c
.RI "\fBconst_reference\fP \fBoperator()\fP (\fBSubscript\fP i, \fBSubscript\fP j) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "const MaTRiX & \fBA_\fP"
.br
.ti -1c
.RI "const MaTRiX::element_type \fBzero\fP"
.br
.ti -1c
.RI "const MaTRiX::element_type \fBone\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class MaTRiX> class TNT::UnitUpperTriangularView< MaTRiX >"

.PP
Definition at line 452 of file triang.h.
.SH "Member Typedef Documentation"
.PP 
.SS "template<class MaTRiX> typedef MaTRiX::const_reference \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBconst_reference\fP"
.PP
Definition at line 462 of file triang.h.
.SS "template<class MaTRiX> typedef MaTRiX::element_type \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBelement_type\fP"
.PP
Definition at line 463 of file triang.h.
.SS "template<class MaTRiX> typedef \fBelement_type\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBT\fP"
.PP
Definition at line 465 of file triang.h.
.SS "template<class MaTRiX> typedef MaTRiX::element_type \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBvalue_type\fP"
.PP
Definition at line 464 of file triang.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class MaTRiX> \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBUnitUpperTriangularView\fP (MaTRiX & A)\fC [inline]\fP"
.PP
Definition at line 475 of file triang.h.
.PP
.nf
: A_(A), zero(0), one(1) {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::dim (\fBSubscript\fP d) const\fC [inline]\fP"
.PP
Definition at line 468 of file triang.h.
.PP
References TNT::UnitUpperTriangularView< MaTRiX >::A_.
.PP
.nf
{  return A_.dim(d); }
.fi
.SS "template<class MaTRiX> \fBconst_reference\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::get (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 478 of file triang.h.
.PP
References TNT::UnitUpperTriangularView< MaTRiX >::A_, TNT::UnitUpperTriangularView< MaTRiX >::one, and TNT::UnitUpperTriangularView< MaTRiX >::zero.
.PP
.nf
    { 
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i<=A_.dim(1));
        assert(1<=j);
        assert(j<=A_.dim(2));
        assert(0<=i && i<A_.dim(0) && 0<=j && j<A_.dim(1));
#endif
        if (i<j)
            return A_(i,j);
        else if (i==j)
            return one;
        else 
            return zero;
    }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::lbound () const\fC [inline]\fP"
.PP
Definition at line 467 of file triang.h.
.PP
Referenced by TNT::matmult().
.PP
.nf
{ return 1; }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::num_cols () const\fC [inline]\fP"
.PP
Definition at line 470 of file triang.h.
.PP
References TNT::UnitUpperTriangularView< MaTRiX >::A_.
.PP
Referenced by TNT::matmult(), and TNT::operator<<().
.PP
.nf
{ return A_.num_cols(); }
.fi
.SS "template<class MaTRiX> \fBSubscript\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::num_rows () const\fC [inline]\fP"
.PP
Definition at line 469 of file triang.h.
.PP
References TNT::UnitUpperTriangularView< MaTRiX >::A_.
.PP
Referenced by TNT::matmult(), and TNT::operator<<().
.PP
.nf
{ return A_.num_rows(); }
.fi
.SS "template<class MaTRiX> \fBconst_reference\fP \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::operator() (\fBSubscript\fP i, \fBSubscript\fP j) const\fC [inline]\fP"
.PP
Definition at line 496 of file triang.h.
.PP
References TNT::UnitUpperTriangularView< MaTRiX >::A_, TNT::UnitUpperTriangularView< MaTRiX >::one, and TNT::UnitUpperTriangularView< MaTRiX >::zero.
.PP
.nf
    {
#ifdef TNT_BOUNDS_CHECK
        assert(1<=i);
        assert(i<=A_.dim(1));
        assert(1<=j);
        assert(j<=A_.dim(2));
#endif
        if (i<j)
            return A_(i,j);
        else if (i==j)
            return one;
        else 
            return zero;
    }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<class MaTRiX> const MaTRiX& \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBA_\fP\fC [protected]\fP"
.PP
Definition at line 456 of file triang.h.
.PP
Referenced by TNT::UnitUpperTriangularView< MaTRiX >::dim(), TNT::UnitUpperTriangularView< MaTRiX >::get(), TNT::UnitUpperTriangularView< MaTRiX >::num_cols(), TNT::UnitUpperTriangularView< MaTRiX >::num_rows(), and TNT::UnitUpperTriangularView< MaTRiX >::operator()().
.SS "template<class MaTRiX> const MaTRiX::element_type \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBone\fP\fC [protected]\fP"
.PP
Definition at line 458 of file triang.h.
.PP
Referenced by TNT::UnitUpperTriangularView< MaTRiX >::get(), and TNT::UnitUpperTriangularView< MaTRiX >::operator()().
.SS "template<class MaTRiX> const MaTRiX::element_type \fBTNT::UnitUpperTriangularView\fP< MaTRiX >::\fBzero\fP\fC [protected]\fP"
.PP
Definition at line 457 of file triang.h.
.PP
Referenced by TNT::UnitUpperTriangularView< MaTRiX >::get(), and TNT::UnitUpperTriangularView< MaTRiX >::operator()().

.SH "Author"
.PP 
Generated automatically by Doxygen for NetTrader from the source code.
