/**\file nt_aux_math_obj.h - NT_aux_math_o auxiliary functions header
 * by Ahmed Aldo Faisal &copy; created 27.4.2000  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.4
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */ 
  

/* $Id: nt_aux_math_func.cpp,v 1.6 2003/01/30 17:13:50 face Exp $ 
* $Log: nt_aux_math_func.cpp,v $
* Revision 1.6  2003/01/30 17:13:50  face
* *** empty log message ***
*
* Revision 1.5  2002/03/04 18:09:10  face
* added checking for NaN and Inf values in find_spikes_in_binary_file-
* BinomialStep: redo loop if after state change the states do not sum up
*
* Revision 1.4  2001/11/06 16:28:15  face
* *** empty log message ***
*
* Revision 1.3  2001/10/12 09:18:38  face
* *** empty log message ***
*
* Revision 1.2  2001/06/25 13:04:57  face
* *** empty log message ***
*
* Revision 1.1  2001/06/11 13:18:56  face
* *** empty log message ***
*
* Revision 1.3  2000/10/15 19:22:58  face
* *** empty log message ***
*
* Revision 1.2  2000/04/27 23:52:45  face
* IMPLEMENT nt_vector_o DESTRUCTOR
*
* Revision 1.1  2000/04/27 18:20:50  face
* loads of changes:
* -static init. fiasco workaounrd
* -texture objects have new structure
* ...
*

*/

#include "nt_aux_math_func.h"



MTRand NTMakeMTRandFunction(MTRand::uint32 oneSeed)
{
	MTRand tmp(oneSeed);
	return tmp;
}


NTreal
NTComputePLogP(NTreal prob)
{

	if (0.0 == prob) return 0;
	else if (prob < 0.0) {
		cerr << "ComputeEntropyElement - Error : Negative probability encountered." << endl;
		exit(1);
	} else {
		return prob*log(prob)/0.69314718055994530942 /* log(2) */;
	}
}

/** @short limit01
Limit a value between [0,1]
\bug unknown
\warning unknown
*/
NTreal
NTlimit01 (NTreal value) 
{
	if (value > 1.0) return 1.0;
	else if (value < 0.0) return 0.0;
	else return value;
}

NTreal
NTround (NTreal value)
{
	return (NTreal)(floor(value + 0.5));
}


/**	Compute the logarithm of the Gamma function
	Taken from function 'gammln' Numerical Recipes in C (Press et al.)
*/
NTreal
NTLogGammaFunction(NTreal arg){
        double x,tmp,ser;
        static double cof[6]={76.18009173,-86.50532033,24.01409822,
                						 -1.231739516,0.120858003e-2,-0.536382e-5};
        int j;

        x=arg-1.0;
        tmp=x+5.5;
        tmp -= (x+0.5)*log(tmp);
        ser=1.0;
        for (j=0;j<=5;j++) {
                x += 1.0;
                ser += cof[j]/x;
        }
        return -tmp+log(2.50662827465*ser);
}


int
NTisnan (double value){
	return int(value != value);
}


int
NTisinf (const double x)
{
  double y = x - x;
  int s = (y != y);

  if (s && x > 0)
  	return +1;
  else if (s && x < 0)
    return -1;
  else
    return 0;
}




/* File skeleton generated by GenNTObj version 0.6. */
