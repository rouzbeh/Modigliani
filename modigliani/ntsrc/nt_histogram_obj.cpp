/**\file nt_histogram_obj.cpp - NT_histogram_o class implementation
 * by Ahmed Aldo Faisal &copy; created 11.10.2000
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


/* $Id: nt_histogram_obj.cpp,v 1.2 2002/02/25 22:48:54 face Exp $
* $Log: nt_histogram_obj.cpp,v $
* Revision 1.2  2002/02/25 22:48:54  face
* *** empty log message ***
*
* Revision 1.1  2001/06/11 13:18:56  face
* *** empty log message ***
*
* Revision 1.1  2000/10/15 19:22:58  face
* *** empty log message ***
*

*/
#include "nt_histogram_obj.h"

/* ***      CONSTRUCTORS	***/
/** Create a NT_histogram_o */
NT_histogram_o::NT_histogram_o(NTreal minVal, NTreal maxVal, NTsize numberOfBins)
        :
        bins((int) numberOfBins)
{
    min = minVal;
    max = maxVal;
    numBins = numberOfBins;
    binWidth = (fabs(max-min))/numBins;
    numDataPoints = 0;
    numOutliers = 0;
    NT_ASSERT( min < max);
    NT_ASSERT( numberOfBins > 0);
}

/* ***      COPY AND ASSIGNMENT	***/
NT_histogram_o::NT_histogram_o(const NT_histogram_o & original):
		NT_o()
{
    bins = original.bins;
    min = original.min;
    max = original.max;
    numBins = original.numBins;
    binWidth = original.binWidth;
    numDataPoints = original.numDataPoints;
    numOutliers = original.numOutliers;
}

const NT_histogram_o&
NT_histogram_o::operator= (const NT_histogram_o & right)
{
    if (this == &right) return *this; // Gracefully handle self assignment
    bins = right.bins;
    min = right.min;
    max = right.max;
    numBins = right.numBins;
    binWidth = right.binWidth;
    numDataPoints = right.numDataPoints;
    numOutliers = right.numOutliers;
    return *this;
}

/* ***      DESTRUCTOR		***/
NT_histogram_o::~NT_histogram_o()
{
}

/* ***  PUBLIC                                    ***   */
/** @short    Reset the histogram class to object creation values
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
 */
void
NT_histogram_o::Reset()
{
    bins.clear();
    numDataPoints = 0;
    numOutliers = 0;
}


/** @short      Insert the value in the appropriate bin,
 				if the value is outside the range the numOutliers
 				counter variable will be increased instead.
    @param      value
    @return     none
   \warning    Bound checking is implicitly done by increasing numOutliers
   \bug        unknown
 */
void
NT_histogram_o::BinValue(NTreal value)
{
    numDataPoints++;
    if ((value > max) || (value < min)) numOutliers++;
    else (bins[floor(0.5 + (value-min)/(NTreal)binWidth)]) += 1;
}

vector <NTreal>
NT_histogram_o::PDF() const
{
    vector <NTreal> probVec(numBins);
    for (NTsize ll = 0; ll< numBins;ll++) {
        probVec[ll] = ((NTreal) bins[ll])/((NTreal)numDataPoints);
    }
    return probVec;
}


NTreal
NT_histogram_o::ShannonEntropy() const
{
    NTreal h = 0;
    NTreal p = 0;
    for (NTsize ll = 0; ll< numBins;ll++) {
        p = ((NTreal) bins[ll])/((NTreal)numDataPoints);
        if (0.0 != p) h -= p*log(p);
    }
    return h/log(2.0);
}

/** @short
    @param  	none
    @return     none
   \warning
   \bug        unknown
 */
void
NT_histogram_o::Show(bool showHeader) const
{
    if (showHeader == true) cout << "Histogram "<<numBins<<" bins ["<<min<<","<<max<<"] with "<<numDataPoints<<" of which "<<numOutliers<<" outliers."<<endl;
    for (NTsize ll = 0; ll<numBins;ll++) {
        cout << bins[ll]<<" ";
    }
    cout << endl;
}

ostream& operator<< (ostream& str, const NT_histogram_o & self)
{
    for (NTsize ll = 0; ll<self.numBins;ll++) {
        str << self.bins[ll]<<"\n ";
    }
    return str;
}


/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */


/* File skeleton generated by GenNTObj version 0.7. */
