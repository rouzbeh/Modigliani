/**
 * @file object.cc
 * Bio-physics related main object implementation
 * @author Ahmed Aldo Faisal &copy; created 15.3.2001  
 * NetTrader - visualisation, scientific and financial analysis and simulation system
 * @version   0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * @section LICENSE
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
#include "object.h"

using namespace modigliani_core;

modigliani_base::Real NTBP_temperature_rate_relation(modigliani_base::Real temp, modigliani_base::Real q10) {
	return (pow(q10, (temp - NTBP_STD_TEMPERATURE) / 10.0));
}

modigliani_base::Real NTBP_temperature_rate_relation(modigliani_base::Real temp,
		modigliani_base::Real baseTemp, modigliani_base::Real q10) {
	return (pow(q10, (temp - baseTemp) / 10.0));
}

/** Compute length constant in muMeter */
modigliani_base::Real NTBP_length_constant_passive_cable(modigliani_base::Real diameter /* muM */,
		modigliani_base::Real rAxoplasmic /* Ohm cm */,
		modigliani_base::Real gLeak /* mSiemens/cm^2 */) {
	return (1.0e6 /* muMeter/m */
			* sqrt(
					1.0e-5 /*  m/muMeter/ ((mSiemens/cm^2) Ohm cm) */* diameter /* muMeter */
							/ (gLeak * rAxoplasmic * 4.0)));
}

modigliani_base::Real Object::timeStep = NTBP_TIMESTEP; //in msec
modigliani_base::Real Object::suggestedTimeStep = NTBP_TIMESTEP; //in msec

/* ***      CONSTRUCTORS	***/
/** Create a Object */
Object::Object() {

	baseTimeStep = NTBP_TIMESTEP; //in msec
}

/* ***      COPY AND ASSIGNMENT	***/
Object::Object(const Object & original) :
		modigliani_base::Obj() {
	baseTimeStep = original.baseTimeStep;
}

Object&
Object::operator=(const Object & right) {
	if (this == &right)
		return (*this); // Gracefully handle self assignment
	// add assignment code here
	return (*this);
}

/* ***      DESTRUCTOR		***/
Object::~Object() {
}

/* ***  PUBLIC                                    ***   */
/** @short       
 @param      none
 @return     none
 \warning    unknown
 \bug        unknown

 void
 Object::() const
 {
 }
 */
/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */

/* File skeleton generated by GenNTObj version 0.7. */
