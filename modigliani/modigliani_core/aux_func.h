/**
 * @file aux_func.h
 * @brief Auxiliary function headers  for heteregenous object creation
 *
 * Copyright (C) 1998-2005 Ahmed Aldo Faisal
 *
 * Copyright (C) 2013 Mohammad Ali Neishabouri
 *
 * @section LICENCE
 * This file is part of Modigliani.
 *
 * Modigliani is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Foobar is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Modigliani.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MODIGLIANI_MODIGLIANI_CORE_AUX_FUNC_H_
#define MODIGLIANI_MODIGLIANI_CORE_AUX_FUNC_H_

extern "C" {
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
}
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/foreach.hpp>
#include <boost/filesystem.hpp>
#include <string>
#include <ctime>
#include <fstream>
#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <map>
#include <cmath>
#include <vector>
#include <exception>
#include "modigliani_core/membrane_compartment_sequence.h"
#include "modigliani_core/file_based_stochastic_voltage_gated_channel.h"
#include "modigliani_core/lua_based_stochastic_voltage_gated_channel.h"
#include "modigliani_core/lua_based_deterministic_voltage_gated_channel.h"
#include "modigliani_core/cylindrical_compartment.h"
#include "modigliani_core/leak_current.h"

using std::string;
using std::cout;
using std::cerr;
using std::vector;
using std::ofstream;
using std::stringstream;
using std::exception;
using std::endl;
using std::ifstream;

namespace modigliani_core {
/**
 * @brief Returns a random channel density calculated so that the
 * average is preserved
 *
 * This function generates a binomial random number used to determine
 * the number of channels is a compartment. In stochastic simulations,
 * it can be usefull to study the effects of the random distribution
 * of ion channels over the membrane.
 * @param chDensity Average density [@f$\si{\per\micro\meter\squared}@f$]
 * @param compArea The membrane area of the target compartment in [@f$\si{\micro\meter\squared}@f$]
 * @return Density in [@f$\si{\per\micro\meter\squared} @f$]
 */
  modigliani_base::Real CorrectedChannelDensity(modigliani_base::
                                                  Real chDensity,
                                                  modigliani_base::
                                                  Real compArea);

/**
 * @brief Creates a new folder in the output directory
 * and puts a timestamp in its name.
 *
 * This function creates a folder using the current date and time in
 * the "%b%d_%H%M%S" format. The name of the created folder is returned.
 * @param outputFolder Containing folder
 * @return Name of the newly created folder
 */
  string CreateOutputFolder(string outputFolder);

/**
 * @brief Creates a cylindrical compartment using the parameters
 * supplied in the parameters structs supplied.
 *
 * The cylindriacl compartment object is created using the parameters
 * contained in the ptrees given to this function. This function the
 * calls AttachCurrent() to attach different currents to the
 * generated compartment.
 * @see AttachCurrent() for more details.
 *
 * @param config_root ptree containing general parameters. Usually
 * this is the root of the ptree generated by parsing a JSON file. The
 * following parameters are expected :
 *   - double diameter in [@f$\si{\micro\meter}@f$]
 *   - double temperature [C]
 * @param simulation_parameters Parameter governing the current run of
 * the simulation. The following parameters are expected :
 *   - double timeStep [ms]
 *   - bool randomize_densities Whether to use stochastic repartition
 * of channels
 * @param compartment_parameters List of parameter for building
 * compartments. The following parameters are expected :
 *   - double length [@f$\si{\micro\meter}@f$]
 *   - double Cm [@f$\si{\micro\farad\per\centi\meter\squared}@f$]
 *   - double Ra [@f$\si{\ohm\centi\meter}@f$]
 *   - ptree currents A list of ptree, each one for one type of
 * membrane current to be attached to some compartments.
 * @param force_alg If this is set to 0, the algorithms are read from
 * the compartment_parameters. Otherwise, all simulation algorithms
 * are forced to be equal to this value. Implemented values so far are
 * :
 *   - 1 Deterministic
 *   - 4 Binomial population
 * 
 * @return Pointer to the constructed compartment.
 * @warning Check the list of required parameters for AttachCurrent().
 */
  Cylindrical_compartment *
    CreateCompartment(boost::property_tree::ptree config_root,
                       boost::property_tree::ptree simulation_parameters,
                       boost::property_tree::ptree compartment_parameters,
                       modigliani_base::Size force_alg);

/**
 * @brief Creates current objects and adds them to the given compartment
 *
 * @param compartment Pointer to the target membrane compartment.
 * @param currents List of ptrees containing current parameters.
 * Each member of the list is expected to contain the following
 * parameters :
 *   - string type. This parameters can have 3 different values.
 * According to this value, further parameters are necessary :
 *     -# type == "leak" For a leak current
 *        . double GLeak
 *        . double eLeak [mV]
 *     -# type == "file" For reading transition probabilities from a
 * JSON file. This option is rarely used.
 *        - double chDen
 *        - double chCond
 *        - double chRevPot
 *        - string chModel Name of the JSON file
 *        - int chAlg
 *        .
 *     -# type == "lua" For using a lua script to generate transition
 * probabilities, as well as deterministic simulations.
 *        - double chDen
 *        - double chCond
 *        - double chRevPot
 *        - string chModel Name of the JSON file
 *        - int chAlg
 *        .
 * @param config_root ptree containing general parameters. Usually
 * this is the root of the ptree generated by parsing a JSON file. The
 * following parameters are expected :
 *   - double temperature [C]
 * @param randomise_densities Whether to use stochastic repartition
 * of channels
 * @param force_alg If this is set to 0, the algorithms are read from
 * the compartment_parameters. Otherwise, all simulation algorithms
 * are forced to be equal to this value. Implemented values so far are
 * :
 *   - 1 Deterministic
 *   - 4 Binomial population
 */
  void AttachCurrent(modigliani_core::Membrane_compartment * compartment,
                      const boost::property_tree::ptree currents,
                      boost::property_tree::ptree config_root,
                      bool randomise_densities,
                      modigliani_base::Size force_alg);

/**
 * @brief Opens a new file in write mode.
 *
 * The file will be named prefix+extension
 * @param outputFolder The folder in which to create the new file.
 * @param prefix String to be prefixed to the file name.
 * @param outStream Reference to ofstream to the opened file.
 * @param extension File extension
 */
  void OpenOutputFile(string outputFolder, string prefix, ofstream & outStream,
                      string extension = ".txt");

/**
 * @brief Opens a new file in write mode, postfixing the name with
 * the given number
 *
 * @overload
 * @param outputFolder The folder in which to create the new file.
 * @param prefix File name prefix
 * @param counter Number postfix
 * @param extension File extension
 * @return Pointer to ofstream pointing to the file
 * the newly created file.
 */
  ofstream *OpenOutputFile(string outputFolder, string prefix, int counter,
                           string extension = ".txt");

/**
 * @brief Creates an axon based on parameters given.
 *
 * The axon is an instance of Membrane_Compartment_Sequence. The
 * parameters 'anatomy_lua' of config_root is executed in a lua
 * interpreter. The variable 'compartments' is then read from the
 * interpreter memory. 'compartments' is assumed to contain an array
 * of integers. This integers are used to index the
 * 'compartments_parameters' array, again in 'config_root', whose
 * members contain the necessary parameters to construct a
 * compartment.
 * @see The documentation for CreateCompartment() for the
 * list of parameters each member of 'compartments_parameters' must provide.
 *
 * @param config_root  ptree containing general parameters. Usually
 * this is the root of the ptree generated by parsing a JSON file. The
 * following parameters are expected :
 *   - string anatomy_lua A lua script which, once executed, yields an
 * array of indexes. Each index determines the type of the compartment
 * to be inserted.
 *   - ptree compartments_parameters A ptree array of ptrees,
 * providing the necessary parameters to construct a membrane
 * compartment.
 *   - double simulation_parameters.timeStep Simulation timestep
 * @param TypePerCompartmentFile Reference to an ofstream where
 * compartment types are saved.
 * @param LengthPerCompartmentFile Reference to an ofstream where
 * compartment lengths are saved.
 * @param force_alg If this is set to 0, the algorithms are read from
 * the compartment_parameters. Otherwise, all simulation algorithms
 * are forced to be equal to this value. Implemented values so far are
 * :
 *   - 1 Deterministic
 *   - 4 Binomial population
 * @return Pointer to the constructed axon.
 */
  Membrane_compartment_sequence *
    CreateAxon(boost::property_tree::ptree config_root,
                ofstream & TypePerCompartmentFile,
                ofstream & LengthPerCompartmentFile,
                modigliani_base::Size force_alg);

/**
 * Reads the parameters in the file given as argument.
 *
 * @param fileName Input file.
 * @return A ptree structure containing the parameters
 */
  boost::property_tree::ptree ReadConfig(string fileName);

/**
 * @brief Returns the compartments from which data will be recorded.
 *
 * @param root_config ptree containing general parameters. Usually
 * this is the root of the ptree generated by parsing a JSON file. The
 * following parameters are expected :
 *   - string electrods_lua A lua script which, once executed, yields an
 * array of indexes. Data from the compartments indexed by this array
 * will then be recorded.
 * @return Vector of compartment indexes
 */
  std::vector < modigliani_base::Size >
    GetElectrods(boost::property_tree::ptree root_config);

/**
 * @brief Adds a folder to the path variable of the given Lua
 * interpreter instance.
 *
 * @param L Lua interpreter instance
 * @param path Folder to add to path
 * @return 0 if successful
 */
int SetLuaPath(lua_State * L, const string path);
}  // namespace modigliani_core
#endif  // MODIGLIANI_MODIGLIANI_CORE_AUX_FUNC_H_
