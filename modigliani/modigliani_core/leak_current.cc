/**
 * @file leak_currentbj.cc
 * Leak_current class implementation
 * @author Ahmed Aldo Faisal &copy; created 19.3.2001  
 * @version   0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * @section LICENSE
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "leak_current.h"
using namespace modigliani_core;

/* ***      CONSTRUCTORS	***/
/** Create a Leak_current */
Leak_current::Leak_current(modigliani_base::Real newArea, modigliani_base::Real newLeakConductance,
		modigliani_base::Real newReversalPotential /* mV */) :
		Membrane_current(newReversalPotential) {
	M_ASSERT(newLeakConductance >= 0);
	M_ASSERT(newArea >= 0);
	set_simulation_mode(DETERMINISTIC);
	maxConductivity = newLeakConductance;
	area_ = newArea;
	UpdateConductance();
}

/* ***      COPY AND ASSIGNMENT	***/
Leak_current::Leak_current(const Leak_current & original) :
		Membrane_current(original.reversal_potential()) {
  set_simulation_mode(DETERMINISTIC);
	maxConductivity = original._maxConductivity();
	area_ = original.area();
	UpdateConductance();
}

Leak_current&
Leak_current::operator=(const Leak_current & right) {
	if (this == &right)
		return (*this); // Gracefully handle self assignment
// add assignment code here
	return (*this);
}

/* ***      DESTRUCTOR		***/
Leak_current::~Leak_current() {
}

/* File skeleton generated by GenNTObj version 0.7. */
