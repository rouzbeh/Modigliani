/**\file Object.h - NT bio-physics related main declaration
 * by Ahmed Aldo Faisal &copy; created 15.3.2001  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _Object_h_
#define _Object_h_

#define NTBP_TIMESTEP 0.001 /* in msec */

/* NT core includes */
#include "mbase/Obj.h"
/* NT includes */
#include "../mbase/Error.h"
/* other includes */
#include "../mbase/physical_constants.h"

enum NTBPKineticFunctionType {
	NTBP_CONSTANT, NTBP_LINEAR, NTBP, NTBP_FERMI, NTBP_GAUSSIAN
};
enum NTBPcurrentType {
	NTBP_LEAK, NTBP_IONIC, NTBP_EXTERNAL
};
enum NTBPstochasticType {
	NTBP_DETERMINISTIC,
	NTBP_GILLESPIE,
	NTBP_LANGEVIN,
	NTBP_SINGLECHANNEL,
	NTBP_NOISYMEAN,
	NTBP_BINOMIALPOPULATION
};
enum NTBPdelayedPotassiumRectifierType {
	NTBP_SGA_K_CONTI, // squid giant axon by Conti et al. (1975)
	NTBP_SGA_SCHNEIDMAN, // values used by Schneidman et al. (1998)
	NTBP_SGA_K_LLANO, // squid giant axon by Llano et al. (1988)
	NTBP_SNAIL, // snail neuron by Reuter & Stevens (1980)
	NTBP_FROG_RANVIER1, // frog ranvier node by Begenisich & Stevens (1975)
	NTBP_FROG_RANVIER2, // frog ranvier node by Neumcke ety al. (1980)
	NTBP_FROG_RANVIER3, // frog ranvier node by Vogel et al. (1991)
	NTBP_FROG_MUSCLE // frog skeletal muscle by Standen et al. (1985)
};

const mbase::Real NTBP_STD_TEMPERATURE = 6.3; // Celsius (NOT TO BE CHANGED)

mbase::Real NTBP_temperature_rate_relation(mbase::Real temp /* C */, mbase::Real q10);
mbase::Real NTBP_temperature_rate_relation(mbase::Real temp /* C */,
		mbase::Real baseTemp /* C */, mbase::Real q10);
/** Compute length constant in muMeter */
mbase::Real NTBP_length_constant_passive_cable(mbase::Real diameter /* mu */,
		mbase::Real rAxoplasmic /* Ohm cm */, mbase::Real gLeak /* mSiemens/cm^2 */);

/** @short Object class
 \bug unknown
 \warning unknown
 TIMESTEP SHOULD BECOME STATIC! FOR GLOBAL CHANGES!
 */

#define NTBP_DEBUG 1
namespace mcore {
class Object: public mbase::Obj {
public:
	/***   Constructors, Copy/Assignment and Destructor  ***/
	Object();
	Object(const Object & original);
	Object & operator=(const Object & right);
	virtual ~Object();
	/* ***  Methods              ***/
	mbase::Real _timeStep() const {
		return (timeStep);
	}
	/** @short  update of explicitly time dependent variables using a deltaT = timeStep, NO update
	 of dependent variables
	 @param      none
	 @return     none
	 \warning    indirectly time dependent variables NOT updated
	 \bug        unknown
	 */
	mbase::Real update_timeStep(mbase::Real newSuggestedTimeStep) { /* if (suggestedTimeStep > newSuggestedTimeStep) */
		suggestedTimeStep = newSuggestedTimeStep;
		return (newSuggestedTimeStep);
	}
	virtual mbase::Mreturn step() {
		std::cerr
				<< "Object:Step() - Warning : Non-overriden base method () called by derived class."
				<< std::endl;
		return (mbase::M_NOT_IMPLEMENTED);
	}
	mbase::Mreturn StepNTBP() {
		timeStep = suggestedTimeStep;
		return (mbase::M_SUCCESS);
	}
	mbase::Real _timeStep() {
		return (timeStep);
	}
	mbase::Real _baseTimeStep() {
		return (baseTimeStep);
	}
	void setTimeStep(mbase::Real newTimeStep) {
		timeStep = newTimeStep;
	}
	/* ***  Data                 ***/
protected:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
private:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	mbase::Real baseTimeStep; // time step size in msec;
	static mbase::Real timeStep; // time step size in msec;
	static mbase::Real suggestedTimeStep; // time step size in msec;
};
}
#endif /* _Object.h_ */ 

/* File skeleton generated by GenNTObj version 0.7. */
