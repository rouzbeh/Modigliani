/**\file Membrane_patchbj.cpp - Membrane_patch class implementation
 * by Ahmed Aldo Faisal &copy; created 21.1.2002  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */ 
  
#include "Membrane_patch.h"

using namespace mcore;

/* ***      CONSTRUCTORS	***/
/** Create a Membrane_patch */
Membrane_patch::Membrane_patch(mbase::Mreal newArea /* [muM^2] */, mbase::Mreal newCM /* muF/cm^2 */)
:
Membrane_compartment(newArea)
{
	Set_cM(newCM);
}


/* ***      COPY AND ASSIGNMENT	***/ 
Membrane_patch::Membrane_patch(const Membrane_patch & original)
:
Membrane_compartment(original)
{
   std::cerr << "Membrane_patch::operator= - Error : Copy operator not defined. Undefined behaviour." <<std::endl;
   // add assignment code here
}

const Membrane_patch&
Membrane_patch::operator= (const Membrane_patch & right)
{
 if (this == &right) return (*this); // Gracefully handle self assignment
 // add assignment code here
  std::cerr << "Membrane_patch::operator= - Error : Assignment operator not defined. Undefined behaviour." <<std::endl;
  return (*this);
}

/* ***      DESTRUCTOR		***/
Membrane_patch::~Membrane_patch()
{
}

/* ***  PUBLIC                                    ***   */  
/** @short       
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown

void
Membrane_patch::() const
{
}
 */


/** No descriptions */
/** @short
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
*/
inline mbase::Mreturn
Membrane_patch::Step()
{
	/*       [mV] == [10^-3 ms nA /muF] */
	mbase::Mreal deltaV =  1e-3 /* mV/muV */ * _timeStep()*CompartmentMembraneNetCurrent()/CompartmentMembraneCapacitance();
	vM = vM + deltaV;
	Membrane_compartment::step(vM);
	return (mbase::M_SUCCESS);
}

/** No descriptions */
/** @short Initial step, needed if time staggering of the differential equations solution is desired.
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
*/
mbase::Mreturn
Membrane_patch::InitialStep()
{
	update_timeStep(_timeStep()/2.0);
	StepNTBP();
	Step();
		
	update_timeStep(_timeStep()*2.0);
	StepNTBP();
	std::cerr <<"NTBP_membrane_compartment_sequence_o::InitialStep() - ERROR : not correctly implemented ? untested." << std::endl;
	return (mbase::M_SUCCESS);
}


/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */


/* File skeleton generated by GenNTObj version 0.7. */
