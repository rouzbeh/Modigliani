/**
 * @file Ion_channels.h
 * Ion_channels class header
 * @author Ahmed Aldo Faisal &copy; created 15.3.2001
 * @version   0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * @section LICENSE
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _mcore_ion_channels_h_
#define _mcore_ion_channels_h_

/* Parent includes */
#include "Object.h"
/* NT includes */
#include "mbase/Uniform_rnd_dist.h"
#include "mbase/Binomial_rnd_dist.h"
#include "Transition_rate_matrix.h"
/* other includes */
#include <vector>
#include <iostream>

namespace mcore{
/**
 * @short Ion_channels class
 * \bug unknown
 * \warning unknown
 */
class Ion_channels: public Object {
public:
	/***   Constructors, Copy/Assignment and Destructor  ***/
	Ion_channels(modigliani_base::Size numNewChannels, modigliani_base::Size numNewStates, Transition_rate_matrix* probMatrix, modigliani_base::Real newTimeStep=0.1);
	Ion_channels(const Ion_channels & original);
	Ion_channels & operator=(const Ion_channels & right);
	virtual ~Ion_channels();
	/* ***  Methods              ***/
	modigliani_base::Size _numChannels() const {
		return (numChannels);
	}
	modigliani_base::Size _numStates() const {
		return (numStates);
	}
	modigliani_base::ReturnEnum GillespieStep(modigliani_base::Real voltage);
	void setAsOpenState(modigliani_base::Size newOpenState);
	modigliani_base::ReturnEnum BinomialStep(modigliani_base::Real voltage);
	modigliani_base::ReturnEnum DeterministicStep(modigliani_base::Real voltage);
	modigliani_base::ReturnEnum step(modigliani_base::Real voltage);
	void ShowStates() const;
	modigliani_base::Size NumOpen() const;
	modigliani_base::Size numChannelsInState(modigliani_base::Size state) const {
		return (stateCounterVec[state]);
	}
	modigliani_base::Size NumClosed() const {
		return (_numChannels() - NumOpen());
	}
	virtual modigliani_base::ReturnEnum SteadyStateDistribution(modigliani_base::Real voltage);
	/** Sum of escape rates from current state [1/s] */
	virtual modigliani_base::Real ComputeChannelStateTimeConstant(modigliani_base::Real voltage) const;
	/**  */
	void setRatesComputed(bool newValue) {
		ratesComputed = newValue;
	}
	bool getRatesComputed() {
		return (ratesComputed);
	}
	/* ***  Data                 ***/

protected:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	// TODO remove this
	std::vector<modigliani_base::Real> statePersistenceProbVec;
	std::vector<int> stateCounterVec;
	static modigliani_base::Uniform_rnd_dist uniformRnd; // [0,1] random number generation
	static modigliani_base::Binomial_rnd_dist binomRnd;

private:
	/* ***  Methods              ***/
	modigliani_base::ReturnEnum ComputeGillespieStep(modigliani_base::Size channelStateId, modigliani_base::Real voltage);
	/* ***  Data                 ***/
	Transition_rate_matrix* _probMatrix;
	std::vector<modigliani_base::Size> openStates;
	modigliani_base::Size numStates;
	modigliani_base::Size numChannels;
	bool ratesComputed;
};
}
#endif /* _mcore_ion_channels.h_ */

/* File skeleton generated by GenNTObj version 0.7. */
