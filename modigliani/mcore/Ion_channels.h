/**\file Ion_channels.h - Ion_channels class header
 * by Ahmed Aldo Faisal &copy; created 15.3.2001  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _mcore_ion_channels_h_
#define _mcore_ion_channels_h_

/* NT core includes */
#include "../ntsrc/nt_main.h"
#include "../ntsrc/nt_types.h"
#include "../ntsrc/nt_obj.h"
/* Parent includes */
#include "Object.h"
/* NT includes */
#include "../ntsrc/nt_error_obj.h"
#include "../ntsrc/nt_uniform_rnd_dist_obj.h"
#include "../ntsrc/Binomial_rnd_dist.h"
#include "Transition_rate_matrix.h"
/* other includes */
#include <vector>
#include <iostream>

//#include "boost/multi_array.hpp"

/** @short NTBP_ion_channels_o class
 \bug unknown
 \warning unknown
 */
namespace mcore{
class Ion_channels: public Object {
public:
	/***   Constructors, Copy/Assignment and Destructor  ***/
	Ion_channels(NTsize numNewChannels, NTsize numNewStates, NTBP_transition_rate_matrix_o* probMatrix, NTreal newTimeStep=0.1);
	Ion_channels(const Ion_channels & original);
	const Ion_channels & operator=(const Ion_channels & right);
	virtual ~Ion_channels();
	/* ***  Methods              ***/
	NTsize _numChannels() const {
		return (numChannels);
	}
	NTsize _numStates() const {
		return (numStates);
	}
	NTreturn GillespieStep(NTreal voltage);
	void setAsOpenState(NTsize newOpenState);
	NTreturn BinomialStep(NTreal voltage);
	NTreturn DeterministicStep(NTreal voltage);
	NTreturn step(NTreal voltage);
	NTreturn ComputeGillespieStep(NTsize channelStateId, NTreal voltage);
	void ShowStates() const;
	NTsize NumOpen() const;
	NTsize numChannelsInState(NTsize state) const {
		return (stateCounterVec[state]);
	}
	NTsize NumClosed() const {
		return (_numChannels() - NumOpen());
	}
	virtual NTreturn SteadyStateDistribution(NTreal voltage);
	/** Sum of escape rates from current state [1/s] */
	virtual NTreal ComputeChannelStateTimeConstant(NTreal voltage) const;
	//virtual NTreturn UpdateStateProb(vector <NTreal> rateConstVec /* in mSec^-1 */) = 0;
	/**  */
	void setRatesComputed(bool newValue) {
		ratesComputed = newValue;
	}
	bool getRatesComputed() {
		return (ratesComputed);
	}
	/* ***  Data                 ***/

protected:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	// TODO remove this
	vector<NTreal> statePersistenceProbVec;
	vector<NTint> stateCounterVec;
	static NT_uniform_rnd_dist_o uniformRnd; // [0,1] random number generation
	static mmath::Binomial_rnd_dist binomRnd;

private:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	NTBP_transition_rate_matrix_o* _probMatrix;
	vector<NTsize> openStates;
	NTsize numStates;
	NTsize numChannels;
	bool ratesComputed;
};
}
#endif /* _mcore_ion_channels.h_ */

/* File skeleton generated by GenNTObj version 0.7. */
