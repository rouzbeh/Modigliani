/**
 * @file Gaussian_vec_rnd_dist.c++
 * Gaussian_vec_rnd_dist class implementation
 * @author Ahmed Aldo Faisal &copy; created 26.6.1999
 * @version  0.3
 * Copyright (C) 1998,199 Ahmed Aldo Faisal
 *
 * @section LICENSE
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRAMY; without even the implied warranty of
 * MERCHAMABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include "Gaussian_vec_rnd_dist.h"

using namespace mbase;

/* ***      CONSTRUCTORS	***/
/** Create a Gaussian_vec_rnd_dist */
Gaussian_vec_rnd_dist::Gaussian_vec_rnd_dist(Real newMean,
		Real newStdDev, Size_t newDim) :
		Vec_rnd_dist(newDim), meanVec(newDim), stdDevVec(newDim) {
	Gaussian_rnd_dist * tmpPtr = new Gaussian_rnd_dist(newMean,
			newStdDev);

	Size_t ll;
	for (ll = 0; ll < dim; ll++) {
		meanVec[ll] = newMean;
		stdDevVec[ll] = newStdDev;
		rndDistPtrVec[ll] = tmpPtr;
	}
}

Gaussian_vec_rnd_dist::Gaussian_vec_rnd_dist(Vector newMean,
		Vector newStdDev, Size_t newDim) :
		Vec_rnd_dist(newDim), meanVec(newDim), stdDevVec(newDim) {
	M_ASSERT_DIM(newMean._dimension(), dim);
	M_ASSERT_DIM(newStdDev._dimension(), dim);
	meanVec = newMean;
	stdDevVec = newStdDev;

	Size_t ll;
	for (ll = 0; ll < dim; ll++) {
		rndDistPtrVec[ll] = new Gaussian_rnd_dist(newMean[ll],
				newStdDev[ll]);
	}
}

/* ***      COPY AND ASSIGNMEM	***/
Gaussian_vec_rnd_dist::Gaussian_vec_rnd_dist(
		const Gaussian_vec_rnd_dist __attribute__((unused)) & original) :
		Vec_rnd_dist(original.dim), meanVec(original.dim), stdDevVec(
				original.dim) {
	M_ASSERT_DIM(original.meanVec._dimension(), dim);
	M_ASSERT_DIM(original.stdDevVec._dimension(), dim);
	meanVec = original.meanVec;
	stdDevVec = original.stdDevVec;

	Size_t ll;
	for (ll = 0; ll < dim; ll++) {
		rndDistPtrVec[ll] = new Gaussian_rnd_dist(original.meanVec[ll],
				original.stdDevVec[ll]);
	}

}

const Gaussian_vec_rnd_dist&
Gaussian_vec_rnd_dist::operator=(
		const Gaussian_vec_rnd_dist & right) {
	if (this == &right)
		return (*this); // Gracefully handle self assignment
	// add assignment code here
	return (*this);
}

/* ***      DESTRUCTOR		***/
Gaussian_vec_rnd_dist::~Gaussian_vec_rnd_dist() {
}

/* ***  PUBLIC                                    ***   */
/** @short
 @param      none
 @return     none
 \warning    unknown
 \bug        unknown
 *//*
 void
 Gaussian_vec_rnd_dist::() const
 {
 }
 */
/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */

/* File skeleton generated by GenMObj version 0.4. */
