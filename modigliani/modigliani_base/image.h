/**
 * @file image.h
 * Image class header
 * @author Ahmed Aldo Faisal &copy; created 14.5.2000
 * @version  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal
 *
 * @section LICENSE
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRAMY; without even the implied warranty of
 * MERCHAMABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _mbase_image_h_
#define _mbase_image_h_

/* M core includes */
#include "obj.h"
/* M includes */
#include "codes.h"

/* other includes */
#include <valarray>
#include <cstring>

namespace modigliani_base {

/** @short Image class
 \bug unknown
 \warning unknown
 */
class Image: public Obj {
public:
    /***   Constructors, Copy/Assignment and Destructor  ***/
    Image(Size width = 128, Size height = 64, Size colorDepth = 16,
            ImageDataFormat dataFormat = RGBA);
    Image(const Image & original);
    const Image & operator=(const Image & right);
    virtual ~Image();
    /* ***  Methods              ***/
    Size _width() {
        return (width);
    }
    Size _height() {
        return (height);
    }
    Size _colorDepth() {
        return (24);
    }
    ImageDataFormat _dataFormat() {
        return (dataFormat);
    }

    ReturnEnum Load(std::string filename, ImageFileType fileType = AUTO);
    ReturnEnum Save(__attribute__ ((unused)) std::string filename,
            __attribute__ ((unused)) ImageFileType fileType = AUTO) const {
        return (ReturnEnum::NOT_IMPLEMENTED);
    }
    ;
    const std::valarray<Size>* GetImageArray() const {
        return (&imageVec);
    }
//valarray<double>* GetRGBAImageArray() const;
    /* ***  Data                 ***/
protected:
    /* ***  Methods              ***/
    Real _imageVecR(Size elementIndex) const {
        return (imageVec[elementIndex] / 255.0);
    }
    Size _imageVecI(Size elementIndex) const {
        return (imageVec[elementIndex]);
    }
    /* ***  Data                 ***/
    Size width;
    Size height;
    Size colorDepth; /*  in bits per pixel without alpha channel {1,2,4,8,15,16,24,32}; */
    ImageDataFormat dataFormat;
private:
    /* ***  Methods              ***/
    ImageFileType Filename2Filetype(std::string filename);
    ReturnEnum LoadBMP(__attribute__ ((unused)) std::string filename) {
        std::cerr << "Not implemented." << std::endl;
        return (ReturnEnum::NOT_IMPLEMENTED);
    }
    ReturnEnum LoadPPM(__attribute__ ((unused)) std::string filename) {
        std::cerr << "Not implemented." << std::endl;
        return (ReturnEnum::NOT_IMPLEMENTED);
    }
    ReturnEnum LoadTGA(std::string filename);
    /* ***  Data                 ***/
    std::valarray<Size> imageVec;
};
}
#endif /* _mbase_image_h_ */

/* File skeleton generated by GenMObj version 0.7. */
