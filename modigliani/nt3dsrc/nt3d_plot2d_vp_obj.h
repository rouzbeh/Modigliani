/**\file nt3d_plot2d_vp_obj.h - NT3D_plot2d_vp_o class header 
 * by Ahmed Aldo Faisal &copy; created 11.5.2001  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* $Id: nt3d_plot2d_vp_obj.h,v 1.1.1.1 2004/12/16 01:38:36 face Exp $ 
 * $Log: nt3d_plot2d_vp_obj.h,v $
 * Revision 1.1.1.1  2004/12/16 01:38:36  face
 * Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
 *
 * Revision 1.1  2001/06/29 13:16:55  face
 * *** empty log message ***
 *

 */
#ifndef _nt3d_plot2d_vp_obj_h_ 
#define _nt3d_plot2d_vp_obj_h_ 

/* Parent includes */
#include "nt3d_plot_vp_obj.h"

/* other includes */
#include <GL/gl.h>
#include <GL/glu.h>

/** @short NT3D_plot2d_vp_o class 
 \bug unknown
 \warning unknown
 */
class NT3D_plot2d_vp_o: public NT3D_plot_vp_o {
public:
	/***   Constructors, Copy/Assignment and Destructor  ***/
	NT3D_plot2d_vp_o();
	NT3D_plot2d_vp_o(const NT3D_plot2d_vp_o & original);
	const NT3D_plot2d_vp_o & operator=(const NT3D_plot2d_vp_o & right);
	virtual ~NT3D_plot2d_vp_o();
	/* ***  Methods              ***/
	void Draw();
	void AutoRange(bool decision) {
		autoRange = decision;
	}
	mbase::Mreturn SetXRange(mbase::Real min, mbase::Real max) {
		M_ASSERT( min < max);
		xMin = min;
		xMax = max;
		return mbase::M_SUCCESS;
	}
	mbase::Mreturn SetYRange(mbase::Real min, mbase::Real max) {
		M_ASSERT( min < max);
		yMin = min;
		yMax = max;
		return mbase::M_SUCCESS;
	}
	/* ***  Data                 ***/
protected:
	/* ***  Methods              ***/
	void InitChild() {
	}
	;
	mbase::Mreturn ResizeChild(mbase::Size_t __attribute__((__unused__)) x,
			mbase::Size_t __attribute__((__unused__)) y) {
		return mbase::M_SUCCESS;
	}
	void RedrawChild() {
		DrawCoordinateSystem();
		DrawData();
	}
	virtual void DrawData() = 0;
	void NewXData(mbase::Real x) {
		if (x < dataXMin)
			dataXMin = x;
		else if (x > dataXMax)
			dataXMax = x;
	}
	void NewYData(mbase::Real y) {
		if (y < dataYMin)
			dataYMin = y;
		else if (y > dataYMax)
			dataYMax = y;
	}
	/* ***  Data                 ***/
	/**  */
	void DrawCoordinateSystem(/* 2DO to be optionalised */);
private:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	mbase::Real dataXMin, dataXMax;
	mbase::Real dataYMin, dataYMax;
	mbase::Real xMin, xMax;
	mbase::Real yMin, yMax;
	bool autoRange;
	bool drawCoord;
};
#endif /* _nt3d_plot2d_vp_obj_h_ */ 

/* File skeleton generated by GenNTObj version 0.7. */
