/**\file nt3d_plot2d_vec_vp_obj.cpp - NT3D_plot2d_vec_vp_o class implementation 
 * by Ahmed Aldo Faisal &copy; created 11.5.2001  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* $Id: nt3d_plot2d_vec_vp_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $ 
 * $Log: nt3d_plot2d_vec_vp_obj.cpp,v $
 * Revision 1.1.1.1  2004/12/16 01:38:36  face
 * Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
 *
 * Revision 1.1  2001/06/29 13:16:55  face
 * *** empty log message ***
 *

 */
#include "nt3d_plot2d_vec_vp_obj.h" 

/* ***      CONSTRUCTORS	***/
/** Create a NT3D_plot2d_vec_vp_o */
NT3D_plot2d_vec_vp_o::NT3D_plot2d_vec_vp_o(mbase::Msize newDim) :
		NT3D_plot2d_vp_o() {
	dim = newDim;
	if (dim > 0) {
		positionVec.resize(dim);
		dataVec.resize(dim);
	}
}

/* ***      COPY AND ASSIGNMENT	***/
NT3D_plot2d_vec_vp_o::NT3D_plot2d_vec_vp_o(
		const NT3D_plot2d_vec_vp_o & original) :
		NT3D_plot2d_vp_o(), dim(original.dim) {
	if (dim > 0) {
		positionVec.resize(dim);
		dataVec.resize(dim);
	}
}

const NT3D_plot2d_vec_vp_o&
NT3D_plot2d_vec_vp_o::operator=(const NT3D_plot2d_vec_vp_o & right) {
	if (this == &right)
		return *this; // Gracefully handle self assignment
	// add assignment code here
	return *this;
}

/* ***      DESTRUCTOR		***/
NT3D_plot2d_vec_vp_o::~NT3D_plot2d_vec_vp_o() {
}

/* ***  PUBLIC                                    ***   */
/** @short
 @param      none
 @return     none
 \warning    unknown
 \bug        unknown
 */
void NT3D_plot2d_vec_vp_o::DrawData() {
	glBegin(GL_LINE_STRIP);
	glColor3f(1.0, 1.0, 0.0);
	for (mbase::Msize ll = 0; ll < dim; ll++) {
		NewXData(positionVec[ll]);
		NewYData(dataVec[ll]);
		glVertex2f(positionVec[ll], dataVec[ll]);
	}
	glEnd();
}

/** @short
 @param      none
 @return     none
 \warning    unknown
 \bug        unknown
 */
mbase::Mreturn NT3D_plot2d_vec_vp_o::SetData(const std::vector<mbase::Real> & newDataVec) {
	if (dim > 0)
		M_ASSERT(newDataVec.size() == dim);
	else
		set_dim(newDataVec.size());
	for (mbase::Msize ll = 0; ll < dim; ll++) {
		dataVec[ll] = newDataVec[ll];
		positionVec[ll] = ll;
	}
	return mbase::M_SUCCESS;
}

/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */

/* File skeleton generated by GenNTObj version 0.7. */
