/**\file ntbp_membrane_patch_obj.cpp - NTBP_membrane_patch_o class implementation 
 * by Ahmed Aldo Faisal &copy; created 21.1.2002  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */ 
  

/* $Id: ntbp_membrane_patch_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $ 
* $Log: ntbp_membrane_patch_obj.cpp,v $
* Revision 1.1.1.1  2004/12/16 01:38:36  face
* Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
*
* Revision 1.1  2003/01/30 17:13:43  face
* *** empty log message ***
*

*/
#include "ntbp_membrane_patch_obj.h" 

/* ***      CONSTRUCTORS	***/
/** Create a NTBP_membrane_patch_o */
NTBP_membrane_patch_o::NTBP_membrane_patch_o(NTreal newArea /* [muM^2] */, NTreal newCM /* muF/cm^2 */)
:
NTBP_membrane_compartment_o(newArea)
{
	Set_cM(newCM);
}


/* ***      COPY AND ASSIGNMENT	***/ 
NTBP_membrane_patch_o::NTBP_membrane_patch_o(const NTBP_membrane_patch_o & original)
:
NTBP_membrane_compartment_o(original)
{
   cerr << "NTBP_membrane_patch_o::operator= - Error : Copy operator not defined. Undefined behaviour." <<endl;
   // add assignment code here
}

const NTBP_membrane_patch_o&  
NTBP_membrane_patch_o::operator= (const NTBP_membrane_patch_o & right)
{
 if (this == &right) return (*this); // Gracefully handle self assignment
 // add assignment code here
  cerr << "NTBP_membrane_patch_o::operator= - Error : Assignment operator not defined. Undefined behaviour." <<endl;
  return (*this);
}

/* ***      DESTRUCTOR		***/
NTBP_membrane_patch_o::~NTBP_membrane_patch_o()
{
}

/* ***  PUBLIC                                    ***   */  
/** @short       
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown

void
NTBP_membrane_patch_o::() const
{
}
 */


/** No descriptions */
/** @short
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
*/
inline NTreturn
NTBP_membrane_patch_o::Step()
{
	/*       [mV] == [10^-3 ms nA /muF] */
	NTreal deltaV =  1e-3 /* mV/muV */ * _timeStep()*CompartmentMembraneNetCurrent()/CompartmentMembraneCapacitance();
	vM = vM + deltaV;
	//cerr << "T" << endl;
//	cerr << vM << endl;
	//cerr << CompartmentMembraneNetCurrent() << endl;
//	cerr <<	CompartmentMembraneCapacitance() << endl;
	NTBP_membrane_compartment_o::step(vM);
	return (NT_SUCCESS);
}

/** No descriptions */
/** @short Initial step, needed if time staggering of the differential equations solution is desired.
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
*/
NTreturn
NTBP_membrane_patch_o::InitialStep()
{
	update_timeStep(_timeStep()/2.0);
	StepNTBP();
	Step();
		
	update_timeStep(_timeStep()*2.0);
	StepNTBP();
	cerr <<"NTBP_membrane_compartment_sequence_o::InitialStep() - ERROR : not correctly implemented ? untested." << endl;
	return (NT_SUCCESS);
}


/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */


/* File skeleton generated by GenNTObj version 0.7. */
