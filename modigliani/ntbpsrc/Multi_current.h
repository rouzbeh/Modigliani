/**\file Multi_current.h - Multi_current_o class header
 * by Ahmed Aldo Faisal &copy; created 16.3.2001
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef _mcore_multi_current_h_
#define _mcore_multi_current_h_

/* NT core includes */
#include "ntsrc/nt_main.h"
#include "ntsrc/nt_types.h"
#include "ntsrc/nt_obj.h"
/* Parent includes */
#include "Membrane_current.h"
/* NT includes */
#include "Ion_channels.h"
/* other includes */

/** @short NTBP_multi_current_o class
 Base class for stochastic channel simulations of individual channels
 \bug unknown
 \warning unknown
 */

namespace mcore {
class Multi_current: public Membrane_current {
public:
	/***   Constructors, Copy/Assignment and Destructor  ***/
	Multi_current(NTreal reversalPotential, // in mV
			NTreal density, // channels per mumeter^2
			NTreal area, // in mumeter^2
			NTreal conductivity, // in mSiemens per channel
			NTreal vBase = 0 // mV
			);
	Multi_current(const Multi_current & original);
	const Multi_current & operator=(const Multi_current & right);
	virtual ~Multi_current();
	/* ***  Methods              ***/
	/* mementary total conductance */
	NTreal _density() const {
		return (density);
	}
	NTreal _area() const {
		return (area);
	}
	/* conductivity per channel in mSiemens */
	NTreal _conductivity() const {
		return (conductivity);
	}
	/* conductivity if all channels open in mSiemens/cm^2, */
	NTreal _maxConductivity() const {
		return (density /* num/muMeter^2 */* conductivity /* mSiemens */* 1.0e8 /* muMeter^2/cm^2 */);
	}
	/**  */
	bool ComputeGillespieStep() {
		cerr << "NTBP_multi_current_o::ComputeGillespieStep()" << endl;
		return (channelsPtr->GillespieStep(voltage));
	}
	void UpdateNumChannels() {
		numChannels = (NTsize) ceil(density * area);
	}
	NTsize _numChannels() const {
		return (numChannels);
	}
	/** Number of total ionic channels */
	NTreal NumChannels() const {
		return (_numChannels());
	}
	NTreal OpenChannelsRatio() const {
		return (open_channels() / NumChannels());
	}
	NTreal _vBase() const {
		return (vBase);
	}
// Dangerous: since cached values are not automatically recomputed in derived classes
//void Set_vBase(NTreal newVBase /* mV */){ vBase = newVBase; }
	Ion_channels * getChannelsPtr() {
		return (channelsPtr);
	}

	/* ***  Data                 ***/
public:
	Ion_channels * channelsPtr;
protected:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	static NT_uniform_rnd_dist_o uniformRnd;
	NTreal conductivity; // in mSiemens per channel
	NTreal density; // channels per muMeter^2
	NTreal vBase; // mV
private:
	/* ***  Methods              ***/
	/* ***  Data                 ***/
	NTsize numChannels;
	NTreal area; // in mumeter^2
	bool ratesComputed;

};
}
#endif /* _mcore_multi_current.h_ */

/* File skeleton generated by GenNTObj version 0.7. */
