/**\file ntbp_sga_sodium_current_obj.cpp - squid giant axon sodium conducta nce class implementation
 * by Ahmed Aldo Faisal &copy; created 16.3.2001
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* $Id: ntbp_sga_sodium_current_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $
 * $Log: ntbp_sga_sodium_current_obj.cpp,v $
 * Revision 1.1.1.1  2004/12/16 01:38:36  face
 * Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
 *
 * Revision 1.2  2003/01/17 16:53:13  face
 * *** empty log message ***
 *
 * Revision 1.1  2001/10/03 14:37:52  face
 * *** empty log message ***
 *

 */
#include "ntbp_sga_sodium_current_obj.h"

/* ***      CONSTRUCTORS	***/
/** Create a NTBP_sga_sodium_current_o */
NTBP_sga_sodium_current_o::NTBP_sga_sodium_current_o(NTreal newArea,
		NTreal newDensity)
:
			NTBP_channels_current_o(115 /* in mV */,
					newDensity /* channels per mu^2 */, newArea /* in mu^2 */,
					4.0 * 10e-9 /* in mS per channel */
			) {
	channelsPtr = new NTBP_ion_channels_o(density * area, 8);
}

/* ***      COPY AND ASSIGNMENT	***/
NTBP_sga_sodium_current_o::NTBP_sga_sodium_current_o(
		const NTBP_sga_sodium_current_o & original)
:
			NTBP_channels_current_o(original._reversalPotential(),
					original.density, original.area, original.conductivity) {
	channelsPtr = new NTBP_ion_channels_o(density * area, 8);
	channelsPtr->setAsOpenState(4);
}

const NTBP_sga_sodium_current_o&
NTBP_sga_sodium_current_o::operator=(const NTBP_sga_sodium_current_o & right) {
	if (this == &right)
		return *this; // Gracefully handle self assignment
	channelsPtr = new NTBP_ion_channels_o(density * area, 8);
	channelsPtr->setAsOpenState(4);
	return *this;
}

/* ***      DESTRUCTOR		***/
NTBP_sga_sodium_current_o::~NTBP_sga_sodium_current_o() {
	delete channelsPtr;
}

/* ***  PUBLIC                                    ***   */
/** @short
 @param      none
 @return     none
 \warning    unknown
 \bug        unknown
 */
NTreturn NTBP_sga_sodium_current_o::StepCurrent() {
	/*vector < NTreal > vec(4);
	 vec[0] = alphaM;
	 vec[1] = betaM;
	 vec[2] = alphaH;
	 vec[3] = betaH;
	 NT_ASSERT (NT_SUCCESS == (channelsPtr)->UpdateStateProb(vec));*/
	return (channelsPtr->Step(voltage));

}

inline void NTBP_sga_sodium_current_o::ComputeRateConstants(NTreal vM /* in mV */) {
	alphaM = (25.0 - vM) / (10.0 * (exp((25.0 - vM) / 10.0) - 1));
	betaM = 4.0 * exp(-vM / 18.0);

	alphaH = 0.07 * exp(-vM / 20.0);
	betaH = 1.0 / (exp(3.0 - vM / 10.0) + 1);
}

NTreal NTBP_sga_sodium_current_o::ComputeChannelStateTimeConstant() const {
	/*	vector < NTreal > vec(4);
	 vec[0] = alphaM;
	 vec[1] = betaM;
	 vec[2] = alphaH;
	 vec[3] = betaH;
	 (channelsPtr)->UpdateStateProb(vec); */
	return channelsPtr->ComputeChannelStateTimeConstant(voltage);
}

/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */

/* File skeleton generated by GenNTObj version 0.7. */
