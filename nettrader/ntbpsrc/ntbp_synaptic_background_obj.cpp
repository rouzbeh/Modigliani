/**\file ntbp_synaptic_background_obj.cpp - NTBP_synaptic_background_o class implementation 
 * by Ahmed Aldo Faisal &copy; created 20.8.2003  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal    
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */ 
  

/*
* $Id: ntbp_synaptic_background_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $ 
* $Log: ntbp_synaptic_background_obj.cpp,v $
* Revision 1.1.1.1  2004/12/16 01:38:36  face
* Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
*
* Revision 1.1  2003/08/24 10:44:18  face
* *** empty log message ***
*
*/

#include "ntbp_synaptic_background_obj.h" 

/* ***      CONSTRUCTORS	***/
/** Create a NTBP_synaptic_background_o */
NTBP_synaptic_background_o::NTBP_synaptic_background_o(
                           NTreal newAvgSynBkCond, /* in nS */
                           NTreal newESynBk,   /* Synaptic background reversal potential mV */
                           NTreal newSynSigma, /* Synaptic noise "diffusion" nS */
                           NTreal newSynTau,   /* Synaptic time constant ms */                        
                           NTreal newVBase /* in mV */
)
:
NTBP_membrane_current_o(newESynBk-newVBase)
{
  avgSynBkCond = newAvgSynBkCond;
  synSigma = newAvgSynBkCond;
  synTau = newSynTau;
  synVar = synSigma * synSigma;
  vBase = newVBase;

  gT = 0.0;
  amplitude = 0.0;
}

/* ***      COPY AND ASSIGNMENT	***/ 
NTBP_synaptic_background_o::NTBP_synaptic_background_o(const NTBP_synaptic_background_o & original)
:
NTBP_membrane_current_o(original._reversalPotential())
{
 // add assignment code here
}

const NTBP_synaptic_background_o&  
NTBP_synaptic_background_o::operator= (const NTBP_synaptic_background_o & right)
{
 if (this == &right) return *this; // Gracefully handle self assignment
 // add assignment code here
  return *this;
}

/* ***      DESTRUCTOR		***/
NTBP_synaptic_background_o::~NTBP_synaptic_background_o()
{
}


/* ***  PUBLIC                                    ***   */  
/** @short       
    @param      none
    @return     none
   \warning    unknown
   \bug        unknown
 */

NTreal
NTBP_synaptic_background_o::ComputeConductance()
{
  return Set_conductance( 0.001 /* mS/nS */ * gT /* nS */ );
}


NTreturn
NTBP_synaptic_background_o::StepCurrent()
{
  amplitude = sqrt( (synVar * synTau / 2.0 ) * (1.0 - exp(-2.0*_timeStep()/synTau)) );
  
  gT += avgSynBkCond +
        (gT - avgSynBkCond) * exp(-_timeStep()/synTau) +
        amplitude * normRnd.RndVal();
  
  return NT_SUCCESS;
}



/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */



/* File skeleton generated by GenNTObj version 0.7. */

