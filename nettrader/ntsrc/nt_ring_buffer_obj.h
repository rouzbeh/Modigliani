/**\file nt_ring_buffer_obj.h - NT_ring_buffer_o class header
 * by Ahmed Aldo Faisal &copy; created 8.10.2001
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.5
 * Copyright (C) 1998,1999,2000 Ahmed Aldo Faisal
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */


/* $Id: nt_ring_buffer_obj.h,v 1.3 2003/01/30 17:13:50 face Exp $
* $Log: nt_ring_buffer_obj.h,v $
* Revision 1.3  2003/01/30 17:13:50  face
* *** empty log message ***
*
* Revision 1.2  2001/10/12 09:18:39  face
* *** empty log message ***
*
* Revision 1.1  2001/10/08 11:01:45  face
* *** empty log message ***
*

*/
#ifndef _nt_ring_buffer_obj_h_
#define _nt_ring_buffer_obj_h_

/* NT core includes */
#include "nt_main.h"
#include "nt_types.h"
#include "nt_obj.h"
/* NT includes */
#include "nt_error_obj.h"

/* other includes */

#include <vector>

/** @short NT_ring_buffer_o class
\bug unknown
\warning unknown
*/

template <class T>
class NT_ring_buffer_o {
public:
    /***   Constructors, Copy/Assignment and Destructor  ***/
    NT_ring_buffer_o(NTsize newRingLength=2) {
        Init(newRingLength);
    }
    NT_ring_buffer_o(const NT_ring_buffer_o & original);
    const NT_ring_buffer_o & operator= (const NT_ring_buffer_o & right);
    virtual ~NT_ring_buffer_o() {}
    /* ***  Methods              ***/
    NTsize _ringLength() const {
        return ringLength;
    }
    /** after resize states are reset to scratch */
    NTreturn Resize(NTsize newRingLength) {
        Init(newRingLength);
    }
    void Push( T value ) {
        bufferVec[IncreaseCounter()] = value;
    }
    void Show() {
        vector <T> tmpVec = Buffer();
        for (NTsize ll=0; ll< _ringLength(); ll++) cout << tmpVec[ll] << " ";
        cout << endl;
    }
    /* highest index is newest entry */
    vector <T> Buffer() {
        vector <T> tmpVec(ringLength);
        for (NTsize ll=0; ll< _ringLength(); ll++) tmpVec[ll] = bufferVec[(_counter()+ll+1) % ringLength];
        return tmpVec;
    }
    /* ***  Data                 ***/
protected:
    /* ***  Methods              ***/
    NTsize IncreaseCounter() {
        counter = (counter + 1) % ringLength;
        return counter;
    }
    NTsize _counter() {
        return counter;
    }
    /* ***  Data                 ***/
    NTsize ringLength;
private:
    /* ***  Methods              ***/
    vector <T> bufferVec;
    NTsize counter;
    void Init(NTsize newRingLength) {
        counter = 0;
        ringLength = newRingLength;
        bufferVec.resize(ringLength);
    }
    /* ***  Data                 ***/
};

#endif /* _nt_ring_buffer_obj_h_ */

/* File skeleton generated by GenNTObj version 0.7. */
