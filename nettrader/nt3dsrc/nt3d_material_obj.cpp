/**\file nt3d_material_obj.cpp - NT3D_material_o class implementation 
 * by Ahmed Aldo Faisal &copy; created 3.7.1999  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.4
 * Copyright (C) 1998,199 Ahmed Aldo Faisal                            
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */ 

/* $Id: nt3d_material_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $ 
* $Log: nt3d_material_obj.cpp,v $
* Revision 1.1.1.1  2004/12/16 01:38:36  face
* Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
*
* Revision 1.1  2001/06/29 13:16:55  face
* *** empty log message ***
*
* Revision 1.8  2000/06/26 19:14:06  face
* finally found the error that caused solid object to disappear:
* the scaling vector was not constructed in the 2nd constructor
* of the solid bject thus resulting in a zero object
* new demo file: showing some random graphics
*
* Revision 1.7  2000/05/11 12:42:08  face
* removed nt3d_rainbow_o by intergrating it into nt3d_light_o
*
* Revision 1.6  2000/05/11 11:32:44  face
* upgrade to NetTrader Version 0.5.
* Common state of all files checkin (Versioon 0.5)
* rearranged color and material classes...
* texture class added
*
* Revision 1.5  2000/04/27 18:20:48  face
* loads of changes:
* -static init. fiasco workaounrd
* -texture objects have new structure
* ...
*
* Revision 1.4  1999/07/17 18:22:03  face
* imodified
*
* Revision 1.3  1999/07/16 15:05:12  face
* added code::^
*
* Revision 1.2  1999/07/05 00:50:44  face
* updated light color model
*
* Revision 1.1  1999/07/04 03:17:33  face
* minor mods
*

*/#include "nt3d_material_obj.h" 

/* ***      CONSTRUCTORS	***/
/** Create a NT3D_material_o */
NT3D_material_o::NT3D_material_o()
:
colorAmbient(),
colorDiffuse(),
colorSpecular(),
colorShininess(0.5),
colorEmission()
{
	Init();
}


/* ***      COPY AND ASSIGNMENT	***/
NT3D_material_o::NT3D_material_o(const NT3D_material_o & original):
		NT_o(),
		colorAmbient(original.colorAmbient),
		colorDiffuse(original.colorDiffuse),
		colorSpecular(original.colorSpecular),
		colorShininess(original.colorShininess),
		colorEmission(original.colorEmission)
{
	Init();
}

const NT3D_material_o&  
NT3D_material_o::operator= (const NT3D_material_o & right)
{
  if (this == &right) return *this; // Gracefully handle self assignment
  // add assignment code here
  return *this;
}


/* ***      DESTRUCTOR		***/
NT3D_material_o::~NT3D_material_o()
{
	// cerr << "NT3D_material_o::~NT3D_material_o()" << endl;
}

/* ***  PUBLIC                                    ***   */  
/** @short       
    @param      none
    @return     none
    \warning    unknown
    \bug        unknown
 */
void
NT3D_material_o::Paint() 
{
	//cerr << "NT3D_material_o::Paint()..." << flush;
	if (glIsEnabled(GL_LIGHTING) == GL_TRUE){
//2DO think about whether it shoud be gloablly switch ed off    glDisable(GL_COLOR_MATERIAL);
	glMaterialfv( GL_FRONT_AND_BACK, GL_AMBIENT, colorAmbient._colorPtr());
    glMaterialfv( GL_FRONT_AND_BACK, GL_DIFFUSE, colorDiffuse._colorPtr());
    glMaterialfv( GL_FRONT_AND_BACK, GL_SPECULAR, colorSpecular._colorPtr());
    glMaterialf( GL_FRONT_AND_BACK, GL_SHININESS,  colorShininess);
    glMaterialfv( GL_FRONT_AND_BACK, GL_EMISSION, colorEmission._colorPtr());
    }else{
    colorAmbient.Paint();
   }
  	//cerr << "...completed" << endl;
}

/* ***  PROTECTED                         ***   */

/** @short 	Init
  Initialize all paramters of the class.
    @param 	none
    @return 	none
    \warning    unknown
    \bug 	unknown
 */
void NT3D_material_o::Init()
{
  colorAmbient = NT3D_white() * 0.2 + NT3D_alpha();
  colorDiffuse = NT3D_white() * 0.2 + NT3D_alpha();
  colorSpecular = NT3D_black() + NT3D_alpha();
  colorShininess = 0.5;
  colorEmission =  NT3D_white() * 0.2 + NT3D_alpha();
}




/* File skeleton generated by GenNTObj version 0.5. */
