/**\file nt3d_camera_obj.cpp - NT3D_camera_o class implementation 
 * by Ahmed Aldo Faisal &copy; created 22.4.1999  
 */
/* NetTrader - visualisation, scientific and financial analysis and simulation system
 * Version:  0.3
 * Copyright (C) 1998,199 Ahmed Aldo Faisal                            
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/* $Id: nt3d_camera_obj.cpp,v 1.1.1.1 2004/12/16 01:38:36 face Exp $
 * $Log: nt3d_camera_obj.cpp,v $
 * Revision 1.1.1.1  2004/12/16 01:38:36  face
 * Imported NetTrader 0.5 source from flyeye02.zoo.cam.ac.uk repository
 *
 * Revision 1.1  2001/06/29 13:16:55  face
 * *** empty log message ***
 *
 * Revision 1.8  2000/10/01 09:33:47  face
 * *** empty log message ***
 *
 * Revision 1.7  2000/04/27 18:20:48  face
 * loads of changes:
 * -static init. fiasco workaounrd
 * -texture objects have new structure
 * ...
 *
 * Revision 1.6  2000/04/26 20:53:02  face
 * *** empty log message ***
 *
 * Revision 1.4  2000/04/26 17:10:34  face
 * minor bug fixed
 * and upgrades:
 *
 * Revision 1.3  1999/07/17 18:21:48  face
 * imodified
 *
 * Revision 1.2  1999/07/03 16:25:23  face
 * parametrised fov
 * access method still necessary
 *
 * Revision 1.1.1.1  1999/07/03 15:17:20  face
 * Switching from RCS to CVS to improve
 * the handling of the new src code subdirectory
 * structure. aaf
 *
 *
 * Revision 1.5  1999/06/26 16:49:02  face
 * *** empty log message ***
 *
 * Revision 1.4  1999/06/19 16:15:49  face
 * *** empty log message ***
 *
 * Revision 1.3  1999/05/13 11:34:53  face
 * *** empty log message ***
 *
 * Revision 1.2  1999/05/08 23:59:01  face
 * *** empty log message ***
 *
 * Revision 1.1  1999/04/24 15:02:58  face
 * Initial revision
 *
 * Revision 1.1  1999/04/22 11:37:49  face
 * Initial revision
 *
 *
 */

#include "nt3d_camera_obj.h"

#include <GL/gl.h>
#include <GL/glu.h>

/* ***      CONSTRUCTORS	***/
/**  */
NT3D_camera_o::NT3D_camera_o(const NT_vector3_o & oNewPosition) :
		NT3D_object_o(oNewPosition), oUp(0, 1, 0) {
	oTarget = NT_UnitXVec3() + oNewPosition;
	cameraChanged = true;
	aspectRatio = 1.0;
	fov = 45.0;
}

/** 2DO TARGET unused, rotation used instead !*/
NT3D_camera_o::NT3D_camera_o(const NT_vector3_o & oNewPosition,
		const NT_vector3_o & oNewTarget) :
		NT3D_object_o(oNewPosition), oUp(0, 1, 0) {
	oTarget = oNewTarget;
	cameraChanged = true;
	aspectRatio = 1.0;
	fov = 45.0;
}

/* ***      COPY AND ASSIGNMENT	***/
NT3D_camera_o::NT3D_camera_o(const NT3D_camera_o & original) :
		NT3D_object_o() {
	cameraChanged = true;
	oTarget = original.oTarget;
	cameraChanged = true;
	aspectRatio = original.aspectRatio;
	fov = original.fov;
}

const NT3D_camera_o& NT3D_camera_o::operator=(const NT3D_camera_o & right) {
	if (this == &right)
		return *this;
	// Gracefully handle self assignmentadd assignment code here 
	cameraChanged = true;
	return *this;
}

/* ***      DESTRUCTOR		***/
NT3D_camera_o::~NT3D_camera_o() {
}

/* ***  PUBLIC                                    ***   */
/** @short       
 @param      none
 @return     none
 \warning    UPDATE CODE ALSO IN NT3D_camera_target_o
 \bug        unknown
 */
inline void NT3D_camera_o::Draw() {
	cameraChanged = true; /* as long as rotations are not intercepted
	 for change test the speedup checking is disabled */
	if (true == cameraChanged) {
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		gluPerspective(fov, aspectRatio, 0.1, 1000.0);
		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();
		// Note: With special combinations of angle and Unit Vectors
		// used below (e.g. UnitMinusZVec3 and y_rot = 270 deg )
		// the other rotation components may canceled of,
		// either a different rotation angle combination should
		// be used
		oTarget = NT_UnitXVec3().XYZrotation(oRotation) + oTranslation;
		gluLookAt(oTranslation[0], oTranslation[1], oTranslation[2], oTarget[0],
				oTarget[1], oTarget[2], oUp[0], oUp[1], oUp[2]);
		//glPushMatrix();//? where does this come from
		cameraChanged = false;
	}
}

/* ***  PROTECTED                         ***   */
/* ***  PRIVATE                           ***   */

/* File skeleton generated by GenNTObj version 0.3. */
