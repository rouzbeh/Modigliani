digraph "modigliani::Object"
{
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node0 [label="{modigliani::Object\n||+ Object()\l+ Object()\l+ operator=()\l+ ~Object()\l+ timestep()\l+ set_timestep()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node0 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node1 [label="{modigliani::Obj\n||+ Obj()\l+ Obj()\l+ ~Obj()\l+ _runnId()\l+ _uniqId()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Obj.html",tooltip="Master class for all objects. "];
  Node0 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{modigliani::Ion_channels\n|+ seed_set_\l# statePersistenceProbVec\l# stateCounterVec\l# rng\l# bin\l# uni\l|+ Ion_channels()\l+ Ion_channels()\l+ operator=()\l+ ~Ion_channels()\l+ num_channels()\l+ num_states()\l+ GillespieStep()\l+ SetAsOpenState()\l+ BinomialStep()\l+ DeterministicStep()\land 6 more...\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Ion__channels.html",tooltip="Base class for all ion channels. "];
  Node0 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{modigliani::Membrane\n||+ Membrane()\l+ Membrane()\l+ operator=()\l+ ~Membrane()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Membrane.html",tooltip="Membrane class. "];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{modigliani::Membrane\l_compartment_sequence\n|+ compartment_vec_\l+ seed_set_\l|+ Membrane_compartment\l_sequence()\l+ Membrane_compartment\l_sequence()\l+ operator=()\l+ ~Membrane_compartment\l_sequence()\l+ PushBack()\l+ Init()\l+ InitialStep()\l+ Step()\l+ InjectCurrent()\l+ num_compartments()\l+ CompartmentSequenceChannel\lStateTimeConstant()\l+ AttachedCurrent()\l+ ReturnCompartment()\l# NumericalRecipesSolveTriDiag()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Membrane__compartment__sequence.html",tooltip="Sequence of cylindrical membrane compartments, basically a cable. "];
  Node0 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{modigliani::Membrane\l_compartment\n|+ seed_set_\l# output_file\l|+ Membrane_compartment()\l+ Membrane_compartment()\l+ operator=()\l+ ~Membrane_compartment()\l+ AttachCurrent()\l+ Step()\l+ Step()\l+ InjectCurrent()\l+ AttachedConductance()\l+ AttachedReversalPotential()\land 20 more...\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Membrane__compartment.html",tooltip="Membrane_compartment class acts as a \"container + glue\" for the various membrane_current classes that..."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{modigliani::Cylindrical\l_compartment\n||+ Cylindrical_compartment()\l+ Cylindrical_compartment()\l+ operator=()\l+ ~Cylindrical_compartment()\l+ ActiveLengthConstant()\l+ CrosssectionalArea()\l+ diameter()\l+ radius()\l+ length()\l+ volume()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Cylindrical__compartment.html",tooltip="Cylindrical membrane compartment. "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{modigliani::Custom\l_cylindrical_compartment\n||+ Custom_cylindrical\l_compartment()\l+ Custom_cylindrical\l_compartment()\l+ operator=()\l+ ~Custom_cylindrical\l_compartment()\l+ AttachCurrentWithConcentrations()\l+ AttachCurrent()\l+ Step()\l+ SetupOutput()\l+ WriteOutput()\l+ InsideConcentration()\l+ OutsideConcentration()\l+ ReversalPotential()\l+ set_temperature()\l+ SetInsideConcentration()\l+ SetOutsideConcentration()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Custom__cylindrical__compartment.html",tooltip="This class is used to take concentrations into account. "];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{modigliani::Membrane\l_patch\n||+ Membrane_patch()\l+ Membrane_patch()\l+ operator=()\l+ ~Membrane_patch()\l+ Step()\l+ InitialStep()\l+ MembraneCurrent()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Membrane__patch.html",tooltip="Membrane_patch class. "];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{modigliani::Spherical\l_compartment\n||+ Spherical_compartment()\l+ Spherical_compartment()\l+ Spherical_compartment()\l+ operator=()\l+ ~Spherical_compartment()\l+ radius()\l+ length()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Spherical__compartment.html",tooltip="This class simulates a spherical Hodgkin-Huxley neuron. "];
  Node0 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{modigliani::Membrane\l_current\n|# voltage_\l# temperature_\l|+ Membrane_current()\l+ Membrane_current()\l+ operator=()\l+ ~Membrane_current()\l+ MaxConductivity()\l+ conductance()\l+ set_reversal_potential()\l+ reversal_potential()\l+ temperature()\l+ set_temperature()\land 11 more...\l# set_current()\l# set_conductance()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Membrane__current.html",tooltip="Membrane_current class. "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{modigliani::Leak_current\n||+ Leak_current()\l+ Leak_current()\l+ operator=()\l+ ~Leak_current()\l+ StepCurrent()\l+ UpdateConductance()\l+ ComputeConductance()\l+ MaxConductivity()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Leak__current.html",tooltip="Simulates a leak current. "];
  Node10 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{modigliani::Network\l_synapse\n||+ Network_synapse()\l+ ~ Network_synapse()\l+ Network_synapse()\l+ operator=()\l+ StepCurrent()\l+ ComputeConductance()\l+ MaxConductivity()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Network__synapse.html",tooltip="This class acts as a simplified synapse for use in neuronal network simulations. "];
  Node10 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{modigliani::Synaptic\l_background\n|+ seed_set_\l|+ Synaptic_background()\l+ Synaptic_background()\l+ operator=()\l+ step_current()\l+ compute_conductance()\l+ ~ Synaptic_background()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Synaptic__background.html",tooltip="This class represents a synaptic background current. "];
  Node10 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node14 [label="{modigliani::Voltage\l_gated_ion_channel_current\n|# conductivity_\l# density_\l|+ Voltage_gated_ion_channel\l_current()\l+ Voltage_gated_ion_channel\l_current()\l+ operator=()\l+ ~Voltage_gated_ion\l_channel_current()\l+ density()\l+ area()\l+ conductivity()\l+ MaxConductivity()\l+ UpdateNumChannels()\l+ num_channels()\l+ OpenChannelsRatio()\l+ OpenChannels()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Voltage__gated__ion__channel__current.html",tooltip="Base class for voltage gated ion channels. "];
  Node14 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node15 [label="{modigliani::File_based\l_stochastic_voltage_gated\l_channel\n|+ probability_matrix_map\l+ number_of_states_map\l+ base_temperature_map\l+ open_states_map\l|+ File_based_stochastic\l_voltage_gated_channel()\l+ File_based_stochastic\l_voltage_gated_channel()\l+ operator=()\l+ ~File_based_stochastic\l_voltage_gated_channel()\l+ StepCurrent()\l+ OpenChannels()\l+ ComputeConductance()\l+ ComputeTimeConstant()\l+ LoadFile()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1File__based__stochastic__voltage__gated__channel.html",tooltip="Voltage gated ion channel with transition probabilities stored in a file. "];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node16 [label="{modigliani::Lua_based\l_deterministic_voltage\l_gated_channel\n|+ lua_script\l|+ Lua_based_deterministic\l_voltage_gated_channel()\l+ Lua_based_deterministic\l_voltage_gated_channel()\l+ ~Lua_based_deterministic\l_voltage_gated_channel()\l+ operator=()\l+ StepCurrent()\l+ OpenChannels()\l+ ComputeConductance()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Lua__based__deterministic__voltage__gated__channel.html",tooltip="This class contains can read a lua script and interpret it to simulate an ion channel deterministical..."];
  Node14 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node17 [label="{modigliani::Lua_based\l_stochastic_voltage_gated\l_channel\n||+ Lua_based_stochastic\l_voltage_gated_channel()\l+ Lua_based_stochastic\l_voltage_gated_channel()\l+ operator=()\l+ ~Lua_based_stochastic\l_voltage_gated_channel()\l+ ComputeTimeConstant()\l+ ComputeConductance()\l+ StepCurrent()\l+ OpenChannels()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Lua__based__stochastic__voltage__gated__channel.html",tooltip="Stochastic ion channel with transition probabilities read from a lua script. "];
  Node0 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node18 [label="{modigliani::Transition\l_rate_matrix\n||+ Transition_rate_matrix()\l+ ~Transition_rate_matrix()\l+ SetTransitionProbability()\l+ SetTransitionProbability()\l+ GetTransitionProbability()\l+ GetTransitionProbability()\l+ GetIndex()\l}",height=0.2,width=0.4,color="black",URL="$classmodigliani_1_1Transition__rate__matrix.html",tooltip="Holds voltage dependent transition rates for a Markov chain. "];
}
